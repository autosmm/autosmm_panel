// –ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ —Å—Ç–∏–ª–µ Apple iOS 26 "Liquid Glass"

class AnalyticsManager {
    constructor() {
        this.currentPeriod = 'week';
        this.settings = {
            weeklyReports: true,
            trendNotifications: true,
            detailedAnalytics: false,
            dataExport: false
        };
        this.isInitialized = false;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    init() {
        if (this.isInitialized) return;
        
        this.initializeEventListeners();
        this.animateMetrics();
        this.startRealTimeUpdates();
        this.isInitialized = true;
        
        console.log('Analytics Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    initializeEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–∏–æ–¥–∞
        const periodButtons = document.querySelectorAll('.period-btn');
        periodButtons.forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.changePeriod(e.target);
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–æ–ø –ø–æ—Å—Ç–æ–≤
        const postItems = document.querySelectorAll('.post-item');
        postItems.forEach(item => {
            item.addEventListener('click', () => {
                this.showPostDetails(item);
            });
        });
    }

    // –°–º–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    changePeriod(button) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        document.querySelectorAll('.period-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        button.classList.add('active');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥
        this.currentPeriod = button.textContent.toLowerCase();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        this.updateChartData();
        this.showNotification(`–ü–µ—Ä–∏–æ–¥ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: ${button.textContent}`, 'info');
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞
    updateChartData() {
        const chartPlaceholder = document.querySelector('.chart-placeholder');
        if (chartPlaceholder) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            chartPlaceholder.innerHTML = `
                <div style="display: flex; align-items: center; gap: 12px;">
                    <div class="loading-spinner"></div>
                    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...
                </div>
            `;
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
            setTimeout(() => {
                chartPlaceholder.innerHTML = `
                    üìà –ì—Ä–∞—Ñ–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∑–∞ ${this.getPeriodName()}
                    <br><small>–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleTimeString()}</small>
                `;
            }, 1000);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
    getPeriodName() {
        const periods = {
            '–¥–µ–Ω—å': '–ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å',
            '–Ω–µ–¥–µ–ª—è': '–ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é', 
            '–º–µ—Å—è—Ü': '–ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü'
        };
        return periods[this.currentPeriod] || '–≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥';
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    animateMetrics() {
        const metricCards = document.querySelectorAll('.metric-card');
        metricCards.forEach((card, index) => {
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                card.style.opacity = '0';
                card.style.transform = 'translateY(20px)';
                card.style.transition = 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)';
                
                // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
                setTimeout(() => {
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                }, 50);
                
                // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
                setTimeout(() => {
                    const progressBar = card.querySelector('.metric-progress-bar');
                    if (progressBar) {
                        const targetWidth = progressBar.style.width;
                        progressBar.style.width = '0%';
                        setTimeout(() => {
                            progressBar.style.width = targetWidth;
                        }, 200);
                    }
                }, 400);
            }, index * 100);
        });
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    toggleSetting(toggleElement) {
        const settingItem = toggleElement.closest('.setting-item');
        const settingName = settingItem.querySelector('.setting-name').textContent;
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        toggleElement.classList.toggle('active');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const isActive = toggleElement.classList.contains('active');
        this.updateSettingState(settingName, isActive);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const status = isActive ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞';
        this.showNotification(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ "${settingName}" ${status}`, 'success');
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—É–ª—å—Å–∞—Ü–∏–∏
        this.addPulseEffect(toggleElement);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    updateSettingState(settingName, isActive) {
        const settingKey = this.getSettingKey(settingName);
        if (settingKey) {
            this.settings[settingKey] = isActive;
            console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', this.settings);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    getSettingKey(settingName) {
        const keyMap = {
            '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã': 'weeklyReports',
            '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–µ–Ω–¥–∞—Ö': 'trendNotifications',
            '–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞': 'detailedAnalytics',
            '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö': 'dataExport'
        };
        return keyMap[settingName];
    }

    // –≠—Ñ—Ñ–µ–∫—Ç –ø—É–ª—å—Å–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
    addPulseEffect(element) {
        element.style.transform = 'scale(1.1)';
        setTimeout(() => {
            element.style.transform = 'scale(1)';
        }, 150);
    }

    // –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –ø–æ—Å—Ç–∞
    showPostDetails(postItem) {
        const postTitle = postItem.querySelector('.post-title').textContent;
        const postStats = postItem.querySelector('.post-stats').textContent;
        const engagement = postItem.querySelector('.post-engagement').textContent;
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏
        this.showPostModal(postTitle, postStats, engagement);
        
        // –≠—Ñ—Ñ–µ–∫—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è
        postItem.style.background = 'rgba(0, 122, 255, 0.1)';
        setTimeout(() => {
            postItem.style.background = '';
        }, 300);
    }

    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ—Ç–∞–ª–µ–π –ø–æ—Å—Ç–∞
    showPostModal(title, stats, engagement) {
        const modal = document.createElement('div');
        modal.className = 'post-details-modal';
        modal.innerHTML = `
            <div class="modal-overlay" onclick="this.parentElement.remove()">
                <div class="modal-container" onclick="event.stopPropagation()">
                    <div class="modal-header">
                        <h3>–î–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞</h3>
                        <button class="modal-close" onclick="this.closest('.post-details-modal').remove()">√ó</button>
                    </div>
                    <div class="modal-content">
                        <h4>${title}</h4>
                        <p><strong>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</strong> ${stats}</p>
                        <p><strong>Engagement:</strong> ${engagement}</p>
                        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω</p>
                        <div class="post-actions">
                            <button class="analytics-btn analytics-btn-secondary">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç</button>
                            <button class="analytics-btn analytics-btn-primary">–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // –°—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: 10000;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(20px);
            animation: fadeIn 0.3s ease;
        `;
        
        document.body.appendChild(modal);
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    generateReport() {
        this.showNotification('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...', 'info');
        
        // –°–∏–º—É–ª—è—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
        setTimeout(() => {
            this.showNotification('–û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!', 'success');
            
            // –°–∏–º—É–ª—è—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            const link = document.createElement('a');
            link.href = 'data:text/plain;charset=utf-8,–û—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ AutoSMM –∑–∞ ' + this.getPeriodName();
            link.download = 'analytics-report-' + Date.now() + '.txt';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }, 2000);
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤
    scheduleReport() {
        const modal = document.createElement('div');
        modal.className = 'schedule-modal';
        modal.innerHTML = `
            <div class="modal-overlay" onclick="this.parentElement.remove()">
                <div class="modal-container" onclick="event.stopPropagation()">
                    <div class="modal-header">
                        <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤</h3>
                        <button class="modal-close" onclick="this.closest('.schedule-modal').remove()">√ó</button>
                    </div>
                    <div class="modal-content">
                        <div class="schedule-options">
                            <div class="schedule-option">
                                <label>
                                    <input type="radio" name="schedule" value="daily" />
                                    –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9:00
                                </label>
                            </div>
                            <div class="schedule-option">
                                <label>
                                    <input type="radio" name="schedule" value="weekly" checked />
                                    –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º
                                </label>
                            </div>
                            <div class="schedule-option">
                                <label>
                                    <input type="radio" name="schedule" value="monthly" />
                                    –ï–∂–µ–º–µ—Å—è—á–Ω–æ 1 —á–∏—Å–ª–∞
                                </label>
                            </div>
                        </div>
                        <div class="schedule-actions">
                            <button class="analytics-btn analytics-btn-secondary" onclick="this.closest('.schedule-modal').remove()">–û—Ç–º–µ–Ω–∞</button>
                            <button class="analytics-btn analytics-btn-primary" onclick="analyticsManager.saveSchedule(this)">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: 10000;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(20px);
            animation: fadeIn 0.3s ease;
        `;
        
        document.body.appendChild(modal);
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    saveSchedule(button) {
        const modal = button.closest('.schedule-modal');
        const selectedOption = modal.querySelector('input[name="schedule"]:checked');
        
        if (selectedOption) {
            const scheduleText = selectedOption.parentElement.textContent.trim();
            this.showNotification(`–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${scheduleText}`, 'success');
            modal.remove();
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    startRealTimeUpdates() {
        // –°–∏–º—É–ª—è—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            this.updateRandomMetric();
        }, 30000);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏
    updateRandomMetric() {
        const metricCards = document.querySelectorAll('.metric-card');
        if (metricCards.length === 0) return;
        
        const randomCard = metricCards[Math.floor(Math.random() * metricCards.length)];
        const valueElement = randomCard.querySelector('.metric-value');
        const trendElement = randomCard.querySelector('.metric-trend');
        
        if (valueElement) {
            // –°–∏–º—É–ª—è—Ü–∏—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            const currentValue = valueElement.textContent;
            const isNumeric = /^\d+/.test(currentValue);
            
            if (isNumeric) {
                const baseValue = parseInt(currentValue);
                const change = Math.floor(Math.random() * 10) - 5; // –æ—Ç -5 –¥–æ +5
                const newValue = Math.max(0, baseValue + change);
                
                // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                valueElement.style.transform = 'scale(1.1)';
                setTimeout(() => {
                    valueElement.textContent = newValue + currentValue.replace(/^\d+/, '');
                    valueElement.style.transform = 'scale(1)';
                }, 200);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥
                if (trendElement && change !== 0) {
                    const isUp = change > 0;
                    trendElement.className = `metric-trend ${isUp ? 'up' : 'down'}`;
                    trendElement.innerHTML = `
                        <svg width="12" height="12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="${isUp ? 'M7 17l5-5 5 5m-5-5v12' : 'M17 7l-5 5-5-5m5 5V7'}"/>
                        </svg>
                        ${isUp ? '+' : ''}${Math.abs(change)}
                    `;
                }
            }
        }
    }

    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    showNotification(message, type) {
        const notification = document.createElement('div');
        notification.className = `analytics-notification notification-${type}`;
        notification.textContent = message;
        
        notification.style.cssText = `
            position: fixed;
            top: 24px;
            right: 24px;
            background: ${type === 'success' ? '#34C759' : type === 'error' ? '#FF3B30' : '#007AFF'};
            color: white;
            padding: 16px 24px;
            border-radius: 16px;
            backdrop-filter: blur(20px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
            z-index: 10002;
            animation: slideInRight 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            max-width: 400px;
            font-weight: 500;
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.4s cubic-bezier(0.4, 0, 0.2, 1)';
            setTimeout(() => {
                if (notification.parentNode) {
                    document.body.removeChild(notification);
                }
            }, 400);
        }, 4000);
    }

    // –°–±—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    reset() {
        this.currentPeriod = 'week';
        this.isInitialized = false;
        
        // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.analyticsManager = new AnalyticsManager();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
function initializeAnalyticsIfNeeded() {
    if (window.location.hash.includes('analytics')) {
        const checkAndInit = () => {
            const analyticsElement = document.querySelector('.analytics-dashboard-page');
            if (analyticsElement) {
                window.analyticsManager.reset();
                window.analyticsManager.init();
            } else {
                setTimeout(checkAndInit, 50);
            }
        };
        setTimeout(checkAndInit, 100);
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', initializeAnalyticsIfNeeded);
window.addEventListener('hashchange', initializeAnalyticsIfNeeded);

// –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –¥–ª—è SPA-–Ω–∞–≤–∏–≥–∞—Ü–∏–∏
if (window.contentManager) {
    const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            if (mutation.type === 'childList' && 
                window.location.hash.includes('analytics')) {
                setTimeout(initializeAnalyticsIfNeeded, 50);
            }
        });
    });
    
    document.addEventListener('DOMContentLoaded', () => {
        const mainContainer = document.querySelector('.main-container');
        if (mainContainer) {
            observer.observe(mainContainer, { 
                childList: true, 
                subtree: true 
            });
        }
    });
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
if (!document.querySelector('#analytics-animation-styles')) {
    const style = document.createElement('style');
    style.id = 'analytics-animation-styles';
    style.textContent = `
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        @keyframes slideInRight {
            from {
                opacity: 0;
                transform: translateX(100%);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }
        
        @keyframes slideOutRight {
            from {
                opacity: 1;
                transform: translateX(0);
            }
            to {
                opacity: 0;
                transform: translateX(100%);
            }
        }
        
        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 2px solid rgba(0, 122, 255, 0.2);
            border-top: 2px solid var(--analytics-primary);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .modal-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 24px;
            min-width: 400px;
            max-width: 90vw;
            border: 1px solid rgba(255, 255, 255, 0.3);
            box-shadow: 0 20px 80px rgba(0, 0, 0, 0.3);
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 16px;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        }
        
        .modal-close {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: rgba(0, 0, 0, 0.6);
            padding: 4px;
            border-radius: 4px;
            transition: all 0.2s ease;
        }
        
        .modal-close:hover {
            background: rgba(0, 0, 0, 0.1);
            color: rgba(0, 0, 0, 0.8);
        }
        
        .schedule-options {
            margin: 20px 0;
        }
        
        .schedule-option {
            margin-bottom: 12px;
        }
        
        .schedule-option label {
            display: flex;
            align-items: center;
            gap: 12px;
            cursor: pointer;
            padding: 8px;
            border-radius: 8px;
            transition: background 0.2s ease;
        }
        
        .schedule-option label:hover {
            background: rgba(0, 122, 255, 0.1);
        }
        
        .schedule-actions,
        .post-actions {
            display: flex;
            gap: 12px;
            justify-content: flex-end;
            margin-top: 20px;
        }
    `;
    document.head.appendChild(style);
}