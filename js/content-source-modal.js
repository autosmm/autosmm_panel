// –ú–æ–¥—É–ª—å –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
// –í —Å—Ç–∏–ª–µ Apple iOS 26 "Liquid Glass"

class ContentSourceModal {
    constructor() {
        this.currentStep = 1;
        this.totalSteps = 3;
        this.selectedSourceType = null;
        this.formData = {};
        this.validationRules = {};
        this.isEditMode = false;
        this.editingSourceId = null;
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    show() {
        this.isEditMode = false;
        this.editingSourceId = null;
        this.currentStep = 1;
        this.selectedSourceType = null;
        this.formData = {};
        this.createModal();
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    showEdit(sourceId) {
        this.isEditMode = true;
        this.editingSourceId = sourceId;
        this.loadSourceData(sourceId);
        this.createModal();
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    createModal() {
        const modal = document.createElement('div');
        modal.className = 'content-source-modal-overlay';
        modal.innerHTML = this.getModalHTML();
        
        document.body.appendChild(modal);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        this.initializeEventListeners(modal);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        setTimeout(() => {
            modal.classList.add('show');
        }, 10);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        this.setInitialFocus(modal);
        
        return modal;
    }

    // HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    getModalHTML() {
        // –ï—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ
        const editModeInfo = this.isEditMode ? `
            <div class="edit-mode-info">
                <div class="edit-mode-tag">
                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"/>
                    </svg>
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                </div>
            </div>
        ` : '';
        
        return `
            <div class="content-source-modal-container">
                <div class="content-source-modal-header">
                    <h2 class="content-source-modal-title">
                        ${this.isEditMode ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞' : '–î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'}
                    </h2>
                    <button class="content-source-modal-close-btn" onclick="contentSourceModal.close()">
                        <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                        </svg>
                    </button>
                </div>
                
                <div class="content-source-modal-content">
                    ${editModeInfo}
                    
                    <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —à–∞–≥–æ–≤ -->
                    <div class="wizard-steps-indicator">
                        <div class="wizard-step-indicator ${this.currentStep >= 1 ? 'active' : ''}" data-step="1">
                            <div class="step-circle">1</div>
                            <span>–¢–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞</span>
                        </div>
                        <div class="step-connector"></div>
                        <div class="wizard-step-indicator ${this.currentStep >= 2 ? 'active' : ''}" data-step="2">
                            <div class="step-circle">2</div>
                            <span>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</span>
                        </div>
                        <div class="step-connector"></div>
                        <div class="wizard-step-indicator ${this.currentStep >= 3 ? 'active' : ''}" data-step="3">
                            <div class="step-circle">3</div>
                            <span>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</span>
                        </div>
                    </div>

                    <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —à–∞–≥–æ–≤ -->
                    <div class="content-source-wizard">
                        ${this.getStep1HTML()}
                        ${this.getStep2HTML()}
                        ${this.getStep3HTML()}
                    </div>

                    <!-- –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π -->
                    <div class="modal-actions">
                        <div class="validation-status" id="validationStatus"></div>
                        <div class="action-buttons">
                            <button class="wizard-btn wizard-btn-secondary" onclick="contentSourceModal.previousStep()" 
                                    id="prevBtn" style="display: none;">
                                <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
                                </svg>
                                –ù–∞–∑–∞–¥
                            </button>
                            <button class="wizard-btn wizard-btn-primary" onclick="contentSourceModal.nextStep()" id="nextBtn">
                                –î–∞–ª–µ–µ
                                <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    // –®–∞–≥ 1: –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    getStep1HTML() {
        return `
            <div class="wizard-step ${this.currentStep === 1 ? 'active' : ''}" id="step1">
                <h3 style="text-align: center; margin-bottom: 32px; font-size: 20px; color: var(--black-color);">
                    –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                </h3>
                
                <div class="source-type-grid">
                    <div class="source-type-card" data-type="telegram" onclick="contentSourceModal.selectSourceType('telegram')">
                        <div class="source-type-icon">üì±</div>
                        <h3>Telegram –∫–∞–Ω–∞–ª</h3>
                        <p>–ù–æ–≤–æ—Å—Ç–∏ –∏ –ø–æ—Å—Ç—ã –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞</p>
                    </div>
                    
                    <div class="source-type-card" data-type="rss" onclick="contentSourceModal.selectSourceType('rss')">
                        <div class="source-type-icon">üì°</div>
                        <h3>RSS –ª–µ–Ω—Ç–∞</h3>
                        <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å—Ç–∞—Ç–µ–π —á–µ—Ä–µ–∑ RSS</p>
                    </div>
                    
                    <div class="source-type-card" data-type="website" onclick="contentSourceModal.selectSourceType('website')">
                        <div class="source-type-icon">üåê</div>
                        <h3>–í–µ–±-—Å–∞–π—Ç</h3>
                        <p>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–µ–±-—Å–∞–π—Ç–∞</p>
                    </div>
                    
                    <div class="source-type-card" data-type="youtube" onclick="contentSourceModal.selectSourceType('youtube')">
                        <div class="source-type-icon">üé•</div>
                        <h3>YouTube –∫–∞–Ω–∞–ª</h3>
                        <p>–ù–æ–≤—ã–µ –≤–∏–¥–µ–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ YouTube</p>
                    </div>
                    
                    <div class="source-type-card" data-type="social" onclick="contentSourceModal.selectSourceType('social')">
                        <div class="source-type-icon">üë•</div>
                        <h3>–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏</h3>
                        <p>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö</p>
                    </div>
                    
                    <div class="source-type-card" data-type="custom" onclick="contentSourceModal.selectSourceType('custom')">
                        <div class="source-type-icon">üìù</div>
                        <h3>–°–≤–æ–∏ —Ç–µ–∫—Å—Ç—ã</h3>
                        <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</p>
                    </div>
                </div>
            </div>
        `;
    }

    // –®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    getStep2HTML() {
        return `
            <div class="wizard-step ${this.currentStep === 2 ? 'active' : ''}" id="step2">
                <h3 style="text-align: center; margin-bottom: 32px; font-size: 20px; color: var(--black-color);">
                    –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                </h3>
                
                <div class="source-config-form" id="sourceConfigForm">
                    <!-- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º–∞—è —Ñ–æ—Ä–º–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ -->
                </div>
            </div>
        `;
    }

    // –®–∞–≥ 3: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –ø—Ä–µ–≤—å—é
    getStep3HTML() {
        return `
            <div class="wizard-step ${this.currentStep === 3 ? 'active' : ''}" id="step3">
                <h3 style="text-align: center; margin-bottom: 32px; font-size: 20px; color: var(--black-color);">
                    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                </h3>
                
                <div class="source-preview" id="sourcePreview">
                    <!-- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–µ –ø—Ä–µ–≤—å—é -->
                </div>
            </div>
        `;
    }

    // –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    selectSourceType(type) {
        this.selectedSourceType = type;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        document.querySelectorAll('.source-type-card').forEach(card => {
            card.classList.remove('selected');
        });
        document.querySelector(`[data-type="${type}"]`).classList.add('selected');
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
        this.updateNextButton();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showNotification(`–í—ã–±—Ä–∞–Ω –∏—Å—Ç–æ—á–Ω–∏–∫: ${this.getSourceTypeName(type)}`, 'info');
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    nextStep() {
        if (this.currentStep < this.totalSteps && this.validateCurrentStep()) {
            this.currentStep++;
            this.updateWizardView();
            
            if (this.currentStep === 2) {
                this.loadSourceConfigForm();
            } else if (this.currentStep === 3) {
                this.loadSourcePreview();
            }
        }
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
    previousStep() {
        if (this.currentStep > 1) {
            this.currentStep--;
            this.updateWizardView();
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞
    updateWizardView() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —à–∞–≥–æ–≤
        document.querySelectorAll('.wizard-step-indicator').forEach((indicator, index) => {
            const stepNumber = index + 1;
            indicator.classList.remove('active', 'completed');
            
            if (stepNumber < this.currentStep) {
                indicator.classList.add('completed');
                indicator.querySelector('.step-circle').innerHTML = '‚úì';
            } else if (stepNumber === this.currentStep) {
                indicator.classList.add('active');
                indicator.querySelector('.step-circle').innerHTML = stepNumber;
            } else {
                indicator.querySelector('.step-circle').innerHTML = stepNumber;
            }
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —à–∞–≥–∏
        document.querySelectorAll('.wizard-step').forEach((step, index) => {
            const stepNumber = index + 1;
            step.classList.remove('active');
            if (stepNumber === this.currentStep) {
                step.classList.add('active');
            }
        });
        
        // –ï—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ, –≤—ã–±–∏—Ä–∞–µ–º –∏ –≤—ã–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
        if (this.isEditMode && this.currentStep === 1 && this.selectedSourceType) {
            const typeCard = document.querySelector(`.source-type-card[data-type="${this.selectedSourceType}"]`);
            if (typeCard) {
                document.querySelectorAll('.source-type-card').forEach(card => {
                    card.classList.remove('selected');
                });
                typeCard.classList.add('selected');
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
                setTimeout(() => {
                    typeCard.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }, 100);
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        this.updateNavigationButtons();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    updateNavigationButtons() {
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        if (this.currentStep === 1) {
            prevBtn.style.display = 'none';
        } else {
            prevBtn.style.display = 'flex';
        }
        
        // –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" / "–°–æ–∑–¥–∞—Ç—å"
        if (this.currentStep === this.totalSteps) {
            nextBtn.innerHTML = `
                <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                </svg>
                ${this.isEditMode ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–°–æ–∑–¥–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫'}
            `;
            nextBtn.onclick = () => this.saveSource();
        } else {
            nextBtn.innerHTML = `
                –î–∞–ª–µ–µ
                <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                </svg>
            `;
            nextBtn.onclick = () => this.nextStep();
        }
        
        this.updateNextButton();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ"
    updateNextButton() {
        const nextBtn = document.getElementById('nextBtn');
        const isValid = this.validateCurrentStep();
        
        nextBtn.disabled = !isValid;
        nextBtn.style.opacity = isValid ? '1' : '0.5';
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
    validateCurrentStep() {
        switch (this.currentStep) {
            case 1:
                return this.selectedSourceType !== null;
            case 2:
                return this.validateSourceConfig();
            case 3:
                return true;
            default:
                return false;
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    validateSourceConfig() {
        const form = document.getElementById('sourceConfigForm');
        if (!form) return false;
        
        const requiredFields = form.querySelectorAll('input[required], select[required], textarea[required]');
        let isValid = true;
        
        requiredFields.forEach(field => {
            if (!field.value.trim()) {
                isValid = false;
            }
        });
        
        return isValid;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ä–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    loadSourceConfigForm() {
        const formContainer = document.getElementById('sourceConfigForm');
        const formHTML = this.getSourceConfigFormHTML(this.selectedSourceType);
        
        formContainer.innerHTML = formHTML;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã
        this.initializeFormHandlers(formContainer);
        
        // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫, –∑–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
        if (this.isEditMode && this.formData) {
            this.populateForm();
        }
    }

    // HTML —Ñ–æ—Ä–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    getSourceConfigFormHTML(type) {
        switch (type) {
            case 'telegram':
                return this.getTelegramFormHTML();
            case 'rss':
                return this.getRSSFormHTML();
            case 'website':
                return this.getWebsiteFormHTML();
            case 'youtube':
                return this.getYouTubeFormHTML();
            case 'social':
                return this.getSocialFormHTML();
            case 'custom':
                return this.getCustomFormHTML();
            default:
                return '<p>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞</p>';
        }
    }

    // –§–æ—Ä–º–∞ –¥–ª—è Telegram –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    getTelegramFormHTML() {
        return `
            <div class="form-section">
                <h3>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
                <div class="form-row">
                    <div class="form-group">
                        <label for="telegramChannelUrl">URL –∫–∞–Ω–∞–ª–∞ Telegram</label>
                        <input type="url" id="telegramChannelUrl" class="liquid-form-input" 
                               placeholder="https://t.me/channelname" required>
                    </div>
                    <div class="form-group">
                        <label for="sourceTitle">–ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞</label>
                        <input type="text" id="sourceTitle" class="liquid-form-input" 
                               placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: TechNews Channel" required>
                    </div>
                </div>
                <div class="form-group">
                    <label for="sourceDescription">–û–ø–∏—Å–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞</label>
                    <textarea id="sourceDescription" class="liquid-form-input" 
                              placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞..."></textarea>
                </div>
            </div>

            <div class="form-section">
                <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏</h3>
                <div class="form-row">
                    <div class="form-group">
                        <label for="updateFrequency">–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏</label>
                        <select id="updateFrequency" class="liquid-form-input">
                            <option value="15">–ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç</option>
                            <option value="30">–ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç</option>
                            <option value="60" selected>–ö–∞–∂–¥—ã–π —á–∞—Å</option>
                            <option value="180">–ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞</option>
                            <option value="360">–ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="contentFilter">–§–∏–ª—å—Ç—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞</label>
                        <select id="contentFilter" class="liquid-form-input">
                            <option value="all">–í—Å–µ –ø–æ—Å—Ç—ã</option>
                            <option value="text">–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ</option>
                            <option value="media">–° –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞–º–∏</option>
                            <option value="links">–°–æ–¥–µ—Ä–∂–∞—â–∏–µ —Å—Å—ã–ª–∫–∏</option>
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    <label>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã</label>
                    <div class="toggle-group">
                        <div class="toggle-option" data-filter="forward">–ò—Å–∫–ª—é—á–∏—Ç—å —Ä–µ–ø–æ—Å—Ç—ã</div>
                        <div class="toggle-option" data-filter="ads">–ò—Å–∫–ª—é—á–∏—Ç—å —Ä–µ–∫–ª–∞–º—É</div>
                        <div class="toggle-option" data-filter="short">–ú–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤</div>
                    </div>
                </div>
            </div>
        `;
    }

    // –§–æ—Ä–º–∞ –¥–ª—è RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    getRSSFormHTML() {
        return `
            <div class="form-section">
                <h3>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
                <div class="form-row">
                    <div class="form-group">
                        <label for="rssUrl">URL RSS –ª–µ–Ω—Ç—ã</label>
                        <input type="url" id="rssUrl" class="liquid-form-input" 
                               placeholder="https://example.com/rss" required>
                    </div>
                    <div class="form-group">
                        <label for="sourceTitle">–ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞</label>
                        <input type="text" id="sourceTitle" class="liquid-form-input" 
                               placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: TechCrunch News" required>
                    </div>
                </div>
                <div class="form-group">
                    <label for="sourceDescription">–û–ø–∏—Å–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞</label>
                    <textarea id="sourceDescription" class="liquid-form-input" 
                              placeholder="–û–ø–∏—Å–∞–Ω–∏–µ RSS –ª–µ–Ω—Ç—ã –∏ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞..."></textarea>
                </div>
            </div>

            <div class="form-section">
                <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏</h3>
                <div class="form-row">
                    <div class="form-group">
                        <label for="updateFrequency">–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏</label>
                        <select id="updateFrequency" class="liquid-form-input">
                            <option value="30">–ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç</option>
                            <option value="60" selected>–ö–∞–∂–¥—ã–π —á–∞—Å</option>
                            <option value="180">–ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞</option>
                            <option value="360">–ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤</option>
                            <option value="720">–ö–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="maxItems">–ú–∞–∫—Å–∏–º—É–º —Å—Ç–∞—Ç–µ–π</label>
                        <select id="maxItems" class="liquid-form-input">
                            <option value="5">5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö</option>
                            <option value="10" selected>10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö</option>
                            <option value="20">20 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö</option>
                            <option value="50">50 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö</option>
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    <label for="keywords">–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
                    <input type="text" id="keywords" class="liquid-form-input" 
                           placeholder="—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, —Å—Ç–∞—Ä—Ç–∞–ø—ã">
                </div>
            </div>
        `;
    }

    // –§–æ—Ä–º–∞ –¥–ª—è YouTube –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    getYouTubeFormHTML() {
        return `
            <div class="form-section">
                <h3>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
                <div class="form-row">
                    <div class="form-group">
                        <label for="youtubeChannelUrl">URL –∫–∞–Ω–∞–ª–∞ YouTube</label>
                        <input type="url" id="youtubeChannelUrl" class="liquid-form-input" 
                               placeholder="https://youtube.com/@channelname" required>
                    </div>
                    <div class="form-group">
                        <label for="sourceTitle">–ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞</label>
                        <input type="text" id="sourceTitle" class="liquid-form-input" 
                               placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: AI Learning Channel" required>
                    </div>
                </div>
                <div class="form-group">
                    <label for="sourceDescription">–û–ø–∏—Å–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞</label>
                    <textarea id="sourceDescription" class="liquid-form-input" 
                              placeholder="–û–ø–∏—Å–∞–Ω–∏–µ YouTube –∫–∞–Ω–∞–ª–∞ –∏ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞..."></textarea>
                </div>
            </div>

            <div class="form-section">
                <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h3>
                <div class="form-row">
                    <div class="form-group">
                        <label for="updateFrequency">–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏</label>
                        <select id="updateFrequency" class="liquid-form-input">
                            <option value="180">–ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞</option>
                            <option value="360" selected>–ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤</option>
                            <option value="720">–ö–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤</option>
                            <option value="1440">–†–∞–∑ –≤ –¥–µ–Ω—å</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="contentType">–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞</label>
                        <select id="contentType" class="liquid-form-input">
                            <option value="titles">–¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏</option>
                            <option value="descriptions" selected>–ó–∞–≥–æ–ª–æ–≤–∫–∏ + –æ–ø–∏—Å–∞–Ω–∏—è</option>
                            <option value="transcripts">–í–∫–ª—é—á–∞—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã</option>
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    <label>–§–∏–ª—å—Ç—Ä—ã –≤–∏–¥–µ–æ</label>
                    <div class="toggle-group">
                        <div class="toggle-option" data-filter="recent">–¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ</div>
                        <div class="toggle-option" data-filter="popular">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ</div>
                        <div class="toggle-option" data-filter="long">–î–ª–∏–Ω–Ω—ã–µ (>10 –º–∏–Ω)</div>
                    </div>
                </div>
            </div>
        `;
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    getWebsiteFormHTML() {
        return `
            <div class="form-section">
                <h3>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
                <div class="form-row">
                    <div class="form-group">
                        <label for="websiteUrl">URL –≤–µ–±-—Å–∞–π—Ç–∞</label>
                        <input type="url" id="websiteUrl" class="liquid-form-input" 
                               placeholder="https://example.com" required>
                    </div>
                    <div class="form-group">
                        <label for="sourceTitle">–ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞</label>
                        <input type="text" id="sourceTitle" class="liquid-form-input" 
                               placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Company Blog" required>
                    </div>
                </div>
                <div class="form-group">
                    <label for="sourceDescription">–û–ø–∏—Å–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞</label>
                    <textarea id="sourceDescription" class="liquid-form-input" 
                              placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –∏ —Ç–∏–ø–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞..."></textarea>
                </div>
            </div>

            <div class="form-section">
                <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</h3>
                <div class="form-row">
                    <div class="form-group">
                        <label for="updateFrequency">–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏</label>
                        <select id="updateFrequency" class="liquid-form-input">
                            <option value="360">–ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤</option>
                            <option value="720" selected>–ö–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤</option>
                            <option value="1440">–†–∞–∑ –≤ –¥–µ–Ω—å</option>
                            <option value="2880">–†–∞–∑ –≤ 2 –¥–Ω—è</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="selector">CSS —Å–µ–ª–µ–∫—Ç–æ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
                        <input type="text" id="selector" class="liquid-form-input" 
                               placeholder=".news-article, #blog-posts">
                    </div>
                </div>
            </div>
        `;
    }

    getSocialFormHTML() {
        return `
            <div class="form-section">
                <h3>–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å</h3>
                <div class="form-group">
                    <label>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É</label>
                    <div class="toggle-group">
                        <div class="toggle-option" data-platform="instagram">Instagram</div>
                        <div class="toggle-option" data-platform="twitter">Twitter/X</div>
                        <div class="toggle-option" data-platform="linkedin">LinkedIn</div>
                        <div class="toggle-option" data-platform="facebook">Facebook</div>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="profileUrl">URL –ø—Ä–æ—Ñ–∏–ª—è</label>
                        <input type="url" id="profileUrl" class="liquid-form-input" 
                               placeholder="https://instagram.com/username" required>
                    </div>
                    <div class="form-group">
                        <label for="sourceTitle">–ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞</label>
                        <input type="text" id="sourceTitle" class="liquid-form-input" 
                               placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Competitor Account" required>
                    </div>
                </div>
            </div>
        `;
    }

    getCustomFormHTML() {
        return `
            <div class="form-section">
                <h3>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç</h3>
                <div class="form-row">
                    <div class="form-group">
                        <label for="sourceTitle">–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞</label>
                        <input type="text" id="sourceTitle" class="liquid-form-input" 
                               placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ–∏ —Å—Ç–∞—Ç—å–∏" required>
                    </div>
                    <div class="form-group">
                        <label for="category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                        <select id="category" class="liquid-form-input">
                            <option value="articles">–°—Ç–∞—Ç—å–∏</option>
                            <option value="ideas">–ò–¥–µ–∏</option>
                            <option value="templates">–®–∞–±–ª–æ–Ω—ã</option>
                            <option value="quotes">–¶–∏—Ç–∞—Ç—ã</option>
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    <label for="customContent">–í–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç</label>
                    <textarea id="customContent" class="liquid-form-input" rows="8"
                              placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ —Ç–µ–∫—Å—Ç—ã, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö —Ç—Ä–µ–º—è –¥–µ—Ñ–∏—Å–∞–º–∏ (---)" required></textarea>
                </div>
            </div>
        `;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–æ—Ä–º—ã
    initializeFormHandlers(formContainer) {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π
        const toggleOptions = formContainer.querySelectorAll('.toggle-option');
        toggleOptions.forEach(option => {
            option.addEventListener('click', () => {
                const group = option.parentElement;
                const isMultiSelect = group.hasAttribute('data-multi');
                
                if (!isMultiSelect) {
                    // –û–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
                    group.querySelectorAll('.toggle-option').forEach(opt => {
                        opt.classList.remove('selected');
                    });
                }
                
                option.classList.toggle('selected');
                this.updateNextButton();
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        const inputs = formContainer.querySelectorAll('input, select, textarea');
        inputs.forEach(input => {
            input.addEventListener('input', () => {
                this.updateNextButton();
                this.updateValidationStatus();
            });
        });
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–≤—å—é –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    loadSourcePreview() {
        const previewContainer = document.getElementById('sourcePreview');
        const formData = this.collectFormData();
        
        const previewHTML = `
            <div class="preview-header">
                <div class="preview-icon">${this.getSourceTypeIcon(this.selectedSourceType)}</div>
                <div class="preview-info">
                    <h4>${formData.sourceTitle || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h4>
                    <p>${this.getSourceTypeName(this.selectedSourceType)}</p>
                </div>
            </div>
            
            <div class="preview-details">
                <div class="form-section">
                    <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞</h3>
                    ${this.generatePreviewDetails(formData)}
                </div>
            </div>
        `;
        
        previewContainer.innerHTML = previewHTML;
    }

    // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
    collectFormData() {
        const form = document.getElementById('sourceConfigForm');
        const data = {
            type: this.selectedSourceType,
            sourceTitle: '',
            sourceDescription: '',
            updateFrequency: 60
        };
        
        if (form) {
            const inputs = form.querySelectorAll('input, select, textarea');
            inputs.forEach(input => {
                data[input.id] = input.value;
            });
            
            // –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏
            const selectedToggles = form.querySelectorAll('.toggle-option.selected');
            data.selectedOptions = Array.from(selectedToggles).map(toggle => 
                toggle.getAttribute('data-filter') || toggle.getAttribute('data-platform') || toggle.textContent
            );
        }
        
        return data;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–µ–≤—å—é
    generatePreviewDetails(data) {
        let details = '';
        
        switch (this.selectedSourceType) {
            case 'telegram':
                details = `
                    <p><strong>–ö–∞–Ω–∞–ª:</strong> ${data.telegramChannelUrl || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                    <p><strong>–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:</strong> ${this.getFrequencyText(data.updateFrequency)}</p>
                    <p><strong>–§–∏–ª—å—Ç—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</strong> ${this.getFilterText(data.contentFilter)}</p>
                `;
                break;
            case 'rss':
                details = `
                    <p><strong>RSS URL:</strong> ${data.rssUrl || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                    <p><strong>–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:</strong> ${this.getFrequencyText(data.updateFrequency)}</p>
                    <p><strong>–ú–∞–∫—Å–∏–º—É–º —Å—Ç–∞—Ç–µ–π:</strong> ${data.maxItems || '10'}</p>
                `;
                break;
            case 'youtube':
                details = `
                    <p><strong>–ö–∞–Ω–∞–ª:</strong> ${data.youtubeChannelUrl || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                    <p><strong>–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</strong> ${this.getContentTypeText(data.contentType)}</p>
                    <p><strong>–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:</strong> ${this.getFrequencyText(data.updateFrequency)}</p>
                `;
                break;
            default:
                details = `<p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${data.sourceDescription || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}</p>`;
        }
        
        if (data.selectedOptions && data.selectedOptions.length > 0) {
            details += `<p><strong>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:</strong> ${data.selectedOptions.join(', ')}</p>`;
        }
        
        return details;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    saveSource() {
        const formData = this.collectFormData();
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!this.validateFinalData(formData)) {
            this.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
            return;
        }
        
        // –°–∏–º—É–ª—è—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        this.showNotification(
            this.isEditMode ? '–ò—Å—Ç–æ—á–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!' : '–ò—Å—Ç–æ—á–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', 
            'success'
        );
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        setTimeout(() => {
            this.close();
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –∑–∞–ø—Ä–æ—Å –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            if (typeof window.refreshContentSources === 'function') {
                window.refreshContentSources();
            }
        }, 1500);
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    close() {
        const modal = document.querySelector('.content-source-modal-overlay');
        if (modal) {
            modal.classList.add('hiding');
            setTimeout(() => {
                document.body.removeChild(modal);
            }, 500);
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    initializeEventListeners(modal) {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                this.close();
            }
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && modal.classList.contains('show')) {
                this.close();
            }
        });
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ñ–æ–∫—É—Å–∞
    setInitialFocus(modal) {
        const firstFocusableElement = modal.querySelector('button, input, select, textarea');
        if (firstFocusableElement) {
            setTimeout(() => {
                firstFocusableElement.focus();
            }, 100);
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    getSourceTypeName(type) {
        const names = {
            'telegram': 'Telegram –∫–∞–Ω–∞–ª',
            'rss': 'RSS –ª–µ–Ω—Ç–∞',
            'website': '–í–µ–±-—Å–∞–π—Ç',
            'youtube': 'YouTube –∫–∞–Ω–∞–ª',
            'social': '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏',
            'custom': '–°–≤–æ–∏ —Ç–µ–∫—Å—Ç—ã'
        };
        return names[type] || type;
    }

    getSourceTypeIcon(type) {
        const icons = {
            'telegram': 'üì±',
            'rss': 'üì°',
            'website': 'üåê',
            'youtube': 'üé•',
            'social': 'üë•',
            'custom': 'üìù'
        };
        return icons[type] || 'üìÑ';
    }

    getFrequencyText(minutes) {
        const hours = Math.floor(minutes / 60);
        if (hours >= 24) {
            return `–†–∞–∑ –≤ ${hours / 24} –¥–Ω—è`;
        } else if (hours >= 1) {
            return `–ö–∞–∂–¥—ã–µ ${hours} —á–∞—Å–∞`;
        } else {
            return `–ö–∞–∂–¥—ã–µ ${minutes} –º–∏–Ω—É—Ç`;
        }
    }

    getFilterText(filter) {
        const filters = {
            'all': '–í—Å–µ –ø–æ—Å—Ç—ã',
            'text': '–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ',
            'media': '–° –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞–º–∏',
            'links': '–°–æ–¥–µ—Ä–∂–∞—â–∏–µ —Å—Å—ã–ª–∫–∏'
        };
        return filters[filter] || filter;
    }

    getContentTypeText(type) {
        const types = {
            'titles': '–¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏',
            'descriptions': '–ó–∞–≥–æ–ª–æ–≤–∫–∏ + –æ–ø–∏—Å–∞–Ω–∏—è',
            'transcripts': '–í–∫–ª—é—á–∞—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã'
        };
        return types[type] || type;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    validateFinalData(data) {
        return data.sourceTitle && data.sourceTitle.trim().length > 0;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    updateValidationStatus() {
        const statusElement = document.getElementById('validationStatus');
        if (!statusElement) return;
        
        const isValid = this.validateCurrentStep();
        
        if (isValid) {
            statusElement.innerHTML = `
                <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                </svg>
                –î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
            `;
            statusElement.className = 'validation-status success';
        } else {
            statusElement.innerHTML = `
                <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01"/>
                </svg>
                –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            `;
            statusElement.className = 'validation-status error';
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    loadSourceData(sourceId) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –∑–∞–ø—Ä–æ—Å
        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        const mockSources = {
            1: {
                type: 'telegram',
                sourceTitle: 'TechNews Digest',
                sourceDescription: '–ö–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏–∑ –º–∏—Ä–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –≥–∞–¥–∂–µ—Ç–æ–≤ –∏ IT-–∏–Ω–¥—É—Å—Ç—Ä–∏–∏',
                telegramChannelUrl: 'https://t.me/technews',
                updateFrequency: '60',
                contentFilter: 'all'
            },
            2: {
                type: 'rss',
                sourceTitle: 'MarketWatch Finance',
                sourceDescription: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞ –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–¥—ã',
                rssUrl: 'https://marketwatch.com/rss',
                updateFrequency: '60',
                maxItems: '10'
            },
            3: {
                type: 'youtube',
                sourceTitle: 'Digital Marketing Pro',
                sourceDescription: '–û–±—É—á–∞—é—â–∏–π –∫–∞–Ω–∞–ª –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–º—É –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É',
                youtubeChannelUrl: 'https://youtube.com/@digitalmarketingpro',
                updateFrequency: '360',
                contentType: 'descriptions'
            }
        };
        
        const mockData = mockSources[sourceId] || mockSources[1];
        
        this.selectedSourceType = mockData.type;
        this.formData = mockData;
        
        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ (–≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞)
        this.currentStep = 1;
    }

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    populateForm() {
        if (!this.formData) return;
        
        Object.keys(this.formData).forEach(key => {
            const element = document.getElementById(key);
            if (element) {
                element.value = this.formData[key];
            }
        });
    }

    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    showNotification(message, type) {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;
        
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'success' ? '#34C759' : type === 'error' ? '#FF3B30' : '#007AFF'};
            color: white;
            padding: 16px 24px;
            border-radius: 16px;
            backdrop-filter: blur(20px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
            z-index: 10002;
            animation: slideIn 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.animation = 'slideOut 0.4s cubic-bezier(0.4, 0, 0.2, 1)';
            setTimeout(() => {
                if (notification.parentNode) {
                    document.body.removeChild(notification);
                }
            }, 400);
        }, 3000);
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.contentSourceModal = new ContentSourceModal();

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
window.createNewContentSet = function() {
    window.contentSourceModal.show();
};

window.editContentSet = function(id) {
    window.contentSourceModal.showEdit(id);
};