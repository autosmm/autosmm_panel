// –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
// –í —Å—Ç–∏–ª–µ Apple iOS 26 "Liquid Glass" —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏

class EnhancedSourceModal {
    constructor() {
        this.currentStep = 1;
        this.totalSteps = 3;
        this.selectedPlatform = null;
        this.formData = {
            platform: '',
            platformName: '',
            platformIcon: '',
            url: '',
            name: '',
            description: '',
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
            additionalFields: {}
        };
        this.platforms = this.initializePlatforms();
        this.isInitialized = false;
        this.validationResults = {};
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    initializePlatforms() {
        return [
            {
                id: 'vkontakte',
                name: '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ',
                icon: 'üîµ',
                placeholder: 'https://vk.com/your_page –∏–ª–∏ @username',
                help: '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ',
                category: 'social',
                features: ['posts', 'photos', 'videos', 'stories'],
                authRequired: false
            },
            {
                id: 'instagram',
                name: 'Instagram',
                icon: 'üì∑',
                placeholder: 'https://instagram.com/username –∏–ª–∏ @username',
                help: '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å Instagram',
                category: 'social',
                features: ['posts', 'stories', 'reels', 'igtv'],
                authRequired: true
            },
            {
                id: 'telegram',
                name: 'Telegram',
                icon: 'üì±',
                placeholder: 'https://t.me/channel_name –∏–ª–∏ @channel_name',
                help: '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ —á–∞—Ç Telegram',
                category: 'messaging',
                features: ['messages', 'media', 'files', 'polls'],
                authRequired: false
            },
            {
                id: 'youtube',
                name: 'YouTube',
                icon: 'üé•',
                placeholder: 'https://youtube.com/channel/... –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞',
                help: '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª YouTube',
                category: 'video',
                features: ['videos', 'shorts', 'live', 'community'],
                authRequired: false
            },
            {
                id: 'facebook',
                name: 'Facebook',
                icon: 'üìò',
                placeholder: 'https://facebook.com/page_name',
                help: '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Facebook',
                category: 'social',
                features: ['posts', 'photos', 'videos', 'events'],
                authRequired: true
            },
            {
                id: 'tiktok',
                name: 'TikTok',
                icon: 'üé¨',
                placeholder: 'https://tiktok.com/@username –∏–ª–∏ @username',
                help: '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å TikTok',
                category: 'video',
                features: ['videos', 'sounds', 'effects'],
                authRequired: false
            },
            {
                id: 'rutube',
                name: 'Rutube',
                icon: 'üì∫',
                placeholder: 'https://rutube.ru/channel/...',
                help: '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª Rutube',
                category: 'video',
                features: ['videos', 'live', 'shorts'],
                authRequired: false
            },
            {
                id: 'odnoklassniki',
                name: '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏',
                icon: 'üü†',
                placeholder: 'https://ok.ru/group/...',
                help: '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –≤ –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞—Ö',
                category: 'social',
                features: ['posts', 'photos', 'videos'],
                authRequired: false
            },
            {
                id: 'pinterest',
                name: 'Pinterest',
                icon: 'üìå',
                placeholder: 'https://pinterest.com/username',
                help: '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å Pinterest',
                category: 'visual',
                features: ['pins', 'boards', 'stories'],
                authRequired: false
            },
            {
                id: 'linkedin',
                name: 'LinkedIn',
                icon: 'üíº',
                placeholder: 'https://linkedin.com/company/...',
                help: '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–º–ø–∞–Ω–∏–∏ LinkedIn',
                category: 'business',
                features: ['posts', 'articles', 'events'],
                authRequired: true
            },
            {
                id: 'twitter',
                name: 'Twitter (X)',
                icon: 'üê¶',
                placeholder: 'https://twitter.com/username –∏–ª–∏ @username',
                help: '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å Twitter',
                category: 'social',
                features: ['tweets', 'threads', 'spaces'],
                authRequired: false
            },
            {
                id: 'threads',
                name: 'Threads',
                icon: 'üßµ',
                placeholder: 'https://threads.net/@username –∏–ª–∏ @username',
                help: '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å Threads',
                category: 'social',
                features: ['posts', 'replies', 'reposts'],
                authRequired: false
            },
            {
                id: 'reddit',
                name: 'Reddit',
                icon: 'ü§ñ',
                placeholder: 'https://reddit.com/r/subreddit_name',
                help: '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–±—Ä–µ–¥–¥–∏—Ç',
                category: 'forum',
                features: ['posts', 'comments', 'hot', 'new'],
                authRequired: false
            },
            {
                id: 'rss',
                name: 'RSS-–ª–µ–Ω—Ç–∞',
                icon: 'üì°',
                placeholder: 'https://example.com/feed.xml',
                help: '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ RSS-–ª–µ–Ω—Ç—É –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ —Å–∞–π—Ç–∞',
                category: 'news',
                features: ['articles', 'updates', 'filters'],
                authRequired: false
            },
            {
                id: 'vk_groups',
                name: '–ì—Ä—É–ø–ø—ã –í–ö',
                icon: 'üë•',
                placeholder: 'https://vk.com/group_name',
                help: '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –í–ö–æ–Ω—Ç–∞–∫—Ç–µ',
                category: 'social',
                features: ['posts', 'discussions', 'events'],
                authRequired: false
            }
        ];
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    open() {
        console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞...');
        this.createModalHTML();
        this.bindEvents();
        this.showModal();
        this.reset();
        
        // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ DOM, –∑–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥
        setTimeout(() => {
            this.updateView();
            console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        }, 100);
        
        console.log('–£–ª—É—á—à–µ–Ω–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –æ—Ç–∫—Ä—ã—Ç–æ');
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ HTML –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    createModalHTML() {
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingModal = document.getElementById('enhancedSourceModal');
        if (existingModal) {
            existingModal.remove();
        }

        const modalHTML = `
            <div class="enhanced-source-modal-overlay" id="enhancedSourceModal">
                <div class="enhanced-source-modal-container" role="dialog" aria-labelledby="modalTitle" aria-describedby="modalDescription">
                    <div class="enhanced-source-modal-header">
                        <div>
                            <h2 class="enhanced-source-modal-title" id="modalTitle">–î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h2>
                            <p class="enhanced-source-modal-subtitle" id="modalDescription">–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤</p>
                        </div>
                        <button class="enhanced-source-modal-close" onclick="enhancedSourceModal.close()" aria-label="–ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ">√ó</button>
                    </div>
                    
                    <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ -->
                    <div class="source-progress-indicator">
                        <div class="progress-steps">
                            <div class="progress-step active" data-step="1">
                                <div class="step-number">1</div>
                                <div class="step-label">–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞</div>
                            </div>
                            <div class="progress-step" data-step="2">
                                <div class="step-number">2</div>
                                <div class="step-label">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</div>
                            </div>
                            <div class="progress-step" data-step="3">
                                <div class="step-number">3</div>
                                <div class="step-label">–ü—Ä–æ–≤–µ—Ä–∫–∞</div>
                            </div>
                        </div>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: 33.33%"></div>
                        </div>
                    </div>
                    
                    <div class="enhanced-source-modal-content">
                        <div class="enhanced-source-wizard">
                            <!-- –®–∞–≥ 1: –í—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã -->
                            <div class="enhanced-wizard-step active" id="enhancedStep1">
                                <div class="platform-selection">
                                    <h3 class="step-title">–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É</h3>
                                    <p class="step-description">–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å –∏–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</p>
                                    
                                    <!-- –§–∏–ª—å—Ç—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π -->
                                    <div class="platform-filters">
                                        <button class="filter-btn active" data-category="all">–í—Å–µ</button>
                                        <button class="filter-btn" data-category="social">–°–æ—Ü—Å–µ—Ç–∏</button>
                                        <button class="filter-btn" data-category="video">–í–∏–¥–µ–æ</button>
                                        <button class="filter-btn" data-category="news">–ù–æ–≤–æ—Å—Ç–∏</button>
                                        <button class="filter-btn" data-category="business">–ë–∏–∑–Ω–µ—Å</button>
                                    </div>
                                    
                                    <div class="enhanced-platform-grid" id="enhancedPlatformGrid">
                                        ${this.renderPlatformGrid()}
                                    </div>
                                </div>
                            </div>

                            <!-- –®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è -->
                            <div class="enhanced-wizard-step" id="enhancedStep2">
                                <div class="enhanced-source-form">
                                    <div class="form-header" id="enhancedFormHeader">
                                        <!-- –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                                    </div>
                                    
                                    <div class="enhanced-form-grid" id="enhancedFormGrid">
                                        <div class="form-group">
                                            <label class="form-label required" for="enhancedSourceUrl">
                                                <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.1m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"/>
                                                </svg>
                                                –°—Å—ã–ª–∫–∞ –∏–ª–∏ –∞–¥—Ä–µ—Å
                                            </label>
                                            <input 
                                                type="url" 
                                                id="enhancedSourceUrl" 
                                                class="enhanced-form-input" 
                                                placeholder="https://..." 
                                                required
                                                aria-describedby="enhancedUrlHelp"
                                            />
                                            <div class="form-help" id="enhancedUrlHelp">
                                                –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ RSS-–ª–µ–Ω—Ç—É
                                            </div>
                                            <div class="validation-message" id="urlValidation"></div>
                                        </div>

                                        <div class="form-group">
                                            <label class="form-label" for="enhancedSourceName">
                                                <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"/>
                                                </svg>
                                                –ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                                            </label>
                                            <input 
                                                type="text" 
                                                id="enhancedSourceName" 
                                                class="enhanced-form-input" 
                                                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"
                                                maxlength="100"
                                            />
                                            <div class="form-help">
                                                –£–¥–æ–±–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                                            </div>
                                        </div>

                                        <div class="form-group">
                                            <label class="form-label" for="enhancedSourceDescription">
                                                <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h7"/>
                                                </svg>
                                                –û–ø–∏—Å–∞–Ω–∏–µ
                                            </label>
                                            <textarea 
                                                id="enhancedSourceDescription" 
                                                class="enhanced-form-input enhanced-form-textarea" 
                                                placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"
                                                maxlength="300"
                                                rows="3"
                                            ></textarea>
                                            <div class="form-help">
                                                –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ–ø–∏—à–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –∏ —Ü–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è -->
                            <div class="enhanced-wizard-step" id="enhancedStep3">
                                <div class="connection-verification">
                                    <div class="verification-header">
                                        <div class="verification-icon" id="verificationIcon">
                                            <div class="loading-spinner"></div>
                                        </div>
                                        <h3 class="verification-title" id="verificationTitle">–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...</h3>
                                        <p class="verification-description" id="verificationDescription">
                                            –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                                        </p>
                                    </div>
                                    
                                    <div class="verification-details" id="verificationDetails">
                                        <div class="detail-item">
                                            <div class="detail-label">URL –ø—Ä–æ–≤–µ—Ä–∫–∞</div>
                                            <div class="detail-status" id="urlCheck">
                                                <div class="status-indicator checking"></div>
                                                <span>–ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è...</span>
                                            </div>
                                        </div>
                                        <div class="detail-item">
                                            <div class="detail-label">–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞</div>
                                            <div class="detail-status" id="contentCheck">
                                                <div class="status-indicator pending"></div>
                                                <span>–û–∂–∏–¥–∞–Ω–∏–µ...</span>
                                            </div>
                                        </div>
                                        <div class="detail-item">
                                            <div class="detail-label">–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å API</div>
                                            <div class="detail-status" id="apiCheck">
                                                <div class="status-indicator pending"></div>
                                                <span>–û–∂–∏–¥–∞–Ω–∏–µ...</span>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <div class="source-preview" id="sourcePreview" style="display: none;">
                                        <h4>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞</h4>
                                        <div class="preview-content" id="previewContent">
                                            <!-- –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="enhanced-source-modal-actions">
                            <button class="enhanced-source-btn enhanced-source-btn-secondary" id="enhancedBackBtn" onclick="enhancedSourceModal.previousStep()" style="display: none;">
                                <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
                                </svg>
                                –ù–∞–∑–∞–¥
                            </button>
                            <div style="flex: 1;"></div>
                            <button class="enhanced-source-btn enhanced-source-btn-primary" id="enhancedNextBtn" onclick="enhancedSourceModal.nextStep()" disabled>
                                –î–∞–ª–µ–µ
                                <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;

        document.body.insertAdjacentHTML('beforeend', modalHTML);
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–µ—Ç–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
    renderPlatformGrid() {
        return this.platforms.map(platform => `
            <div class="enhanced-platform-item ${platform.authRequired ? 'auth-required' : ''}" 
                 data-platform="${platform.id}" 
                 data-category="${platform.category}"
                 onclick="enhancedSourceModal.selectPlatform('${platform.id}')"
                 role="button"
                 tabindex="0"
                 aria-label="–í—ã–±—Ä–∞—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É ${platform.name}">
                
                ${platform.authRequired ? '<div class="auth-badge">–¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é</div>' : ''}
                
                <div class="platform-icon-wrapper">
                    <span class="enhanced-platform-icon">${platform.icon}</span>
                </div>
                
                <div class="enhanced-platform-info">
                    <div class="enhanced-platform-name">${platform.name}</div>
                    <div class="platform-category">${this.getCategoryName(platform.category)}</div>
                </div>
                
                <div class="platform-features">
                    ${platform.features.slice(0, 3).map(feature => 
                        `<span class="feature-tag">${this.getFeatureName(feature)}</span>`
                    ).join('')}
                </div>
                
                <div class="selection-indicator">
                    <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                    </svg>
                </div>
            </div>
        `).join('');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    getCategoryName(category) {
        const categories = {
            'social': '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å',
            'video': '–í–∏–¥–µ–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
            'messaging': '–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä',
            'news': '–ù–æ–≤–æ—Å—Ç–∏',
            'business': '–ë–∏–∑–Ω–µ—Å',
            'visual': '–í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç',
            'forum': '–§–æ—Ä—É–º'
        };
        return categories[category] || '–î—Ä—É–≥–æ–µ';
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    getFeatureName(feature) {
        const features = {
            'posts': '–ü–æ—Å—Ç—ã',
            'photos': '–§–æ—Ç–æ',
            'videos': '–í–∏–¥–µ–æ',
            'stories': '–°—Ç–æ—Ä–∏—Å',
            'reels': '–†–∏–ª—Å',
            'live': '–ü—Ä—è–º—ã–µ —ç—Ñ–∏—Ä—ã',
            'messages': '–°–æ–æ–±—â–µ–Ω–∏—è',
            'articles': '–°—Ç–∞—Ç—å–∏',
            'comments': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏',
            'events': '–°–æ–±—ã—Ç–∏—è',
            'shorts': '–ö–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ',
            'community': '–°–æ–æ–±—â–µ—Å—Ç–≤–æ'
        };
        return features[feature] || feature;
    }

    // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
    bindEvents() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
        const overlay = document.getElementById('enhancedSourceModal');
        if (overlay) {
            overlay.addEventListener('click', (e) => {
                if (e.target === overlay) {
                    this.close();
                }
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è ESC
        document.addEventListener('keydown', this.handleKeyDown.bind(this));

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
        this.bindFormEvents();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        this.bindFilterEvents();
    }

    // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π —Ñ–æ—Ä–º—ã
    bindFormEvents() {
        const urlInput = document.getElementById('enhancedSourceUrl');
        const nameInput = document.getElementById('enhancedSourceName');
        const descInput = document.getElementById('enhancedSourceDescription');

        if (urlInput) {
            urlInput.addEventListener('input', () => {
                this.formData.url = urlInput.value.trim();
                this.validateUrl();
                this.updateNextButton();
            });

            urlInput.addEventListener('blur', () => {
                this.validateUrl();
            });
        }

        if (nameInput) {
            nameInput.addEventListener('input', () => {
                this.formData.name = nameInput.value.trim();
            });
        }

        if (descInput) {
            descInput.addEventListener('input', () => {
                this.formData.description = descInput.value.trim();
            });
        }
    }

    // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤
    bindFilterEvents() {
        const filterButtons = document.querySelectorAll('.filter-btn');
        filterButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                const category = btn.dataset.category;
                this.filterPlatforms(category);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
                filterButtons.forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
            });
        });
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º
    filterPlatforms(category) {
        const platformItems = document.querySelectorAll('.enhanced-platform-item');
        
        platformItems.forEach(item => {
            const itemCategory = item.dataset.category;
            if (category === 'all' || itemCategory === category) {
                item.style.display = 'block';
                item.style.animation = 'fadeInUp 0.3s ease';
            } else {
                item.style.display = 'none';
            }
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à
    handleKeyDown(e) {
        if (e.key === 'Escape') {
            this.close();
        }
    }

    // –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    showModal() {
        const modal = document.getElementById('enhancedSourceModal');
        if (modal) {
            // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            document.body.style.overflow = 'hidden';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            setTimeout(() => {
                modal.classList.add('active');
            }, 10);
        }
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    close() {
        const modal = document.getElementById('enhancedSourceModal');
        if (modal) {
            modal.classList.remove('active');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
            document.body.style.overflow = '';
            
            // –£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                modal.remove();
                document.removeEventListener('keydown', this.handleKeyDown.bind(this));
            }, 400);
        }
    }

    // –í—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    selectPlatform(platformId) {
        const platform = this.platforms.find(p => p.id === platformId);
        if (!platform) return;

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        this.selectedPlatform = platform;
        this.formData.platform = platform.id;
        this.formData.platformName = platform.name;
        this.formData.platformIcon = platform.icon;

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        document.querySelectorAll('.enhanced-platform-item').forEach(item => {
            item.classList.remove('selected');
        });
        
        const selectedItem = document.querySelector(`[data-platform="${platformId}"]`);
        if (selectedItem) {
            selectedItem.classList.add('selected');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–º –≤—ã–±–æ—Ä–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        const sourcesCount = window.aiAutopostingWizard?.availableSources?.length || 0;
        const isFirstSelection = sourcesCount === 0;
        
        if (isFirstSelection) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–≤–æ–º –≤—ã–±–æ—Ä–µ
            this.showFirstSelectionNotification(platform);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
        setTimeout(() => {
            this.updateNextButton();
        }, 10);

        console.log('–í—ã–±—Ä–∞–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞:', platform.name);
        console.log('–ö–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–∞:', !!this.selectedPlatform);
        console.log('–≠—Ç–æ –ø–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞:', isFirstSelection);
    }

    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–±–æ—Ä–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    showFirstSelectionNotification(platform) {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = 'first-selection-notification';
        notification.innerHTML = `
            <div class="notification-popup">
                <div class="popup-icon">
                    <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                    </svg>
                </div>
                <div class="popup-content">
                    <h4>üéâ –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!</h4>
                    <p>–í—ã –≤—ã–±—Ä–∞–ª–∏ <strong>${platform.name}</strong> –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–µ—Ä–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–ª–∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é AutoSMM –Ω–∞–±–æ—Ä–∞!</p>
                </div>
                <div class="popup-close" onclick="this.parentElement.parentElement.remove()">√ó</div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (!document.getElementById('firstSelectionStyles')) {
            const styles = document.createElement('style');
            styles.id = 'firstSelectionStyles';
            styles.textContent = `
                .first-selection-notification {
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    z-index: 10001;
                    animation: slideInRight 0.5s ease-out;
                }

                .notification-popup {
                    background: linear-gradient(135deg, 
                        rgba(255, 255, 255, 0.95) 0%, 
                        rgba(248, 250, 252, 0.95) 100%);
                    border: 1px solid rgba(99, 102, 241, 0.3);
                    border-radius: 16px;
                    padding: 20px;
                    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15);
                    backdrop-filter: blur(20px);
                    max-width: 350px;
                    position: relative;
                }

                .popup-icon {
                    background: linear-gradient(135deg, #6366f1, #8b5cf6);
                    color: white;
                    width: 40px;
                    height: 40px;
                    border-radius: 12px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    margin-bottom: 12px;
                }

                .popup-content h4 {
                    font-size: 16px;
                    font-weight: 600;
                    color: #1e293b;
                    margin: 0 0 8px 0;
                }

                .popup-content p {
                    font-size: 14px;
                    color: #475569;
                    margin: 0;
                    line-height: 1.5;
                }

                .popup-close {
                    position: absolute;
                    top: 8px;
                    right: 12px;
                    width: 24px;
                    height: 24px;
                    border-radius: 50%;
                    background: rgba(0, 0, 0, 0.1);
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    cursor: pointer;
                    font-size: 16px;
                    color: #64748b;
                    transition: all 0.2s ease;
                }

                .popup-close:hover {
                    background: rgba(0, 0, 0, 0.2);
                    color: #1e293b;
                }

                @keyframes slideInRight {
                    from {
                        transform: translateX(100%);
                        opacity: 0;
                    }
                    to {
                        transform: translateX(0);
                        opacity: 1;
                    }
                }

                @media (max-width: 768px) {
                    .first-selection-notification {
                        top: 10px;
                        right: 10px;
                        left: 10px;
                    }
                    
                    .notification-popup {
                        max-width: none;
                        padding: 16px;
                    }
                }
            `;
            document.head.appendChild(styles);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ DOM
        document.body.appendChild(notification);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notification.parentElement) {
                notification.style.animation = 'slideInRight 0.5s ease-out reverse';
                setTimeout(() => notification.remove(), 500);
            }
        }, 8000);

        console.log('–ü–æ–∫–∞–∑–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–≤–æ–º –≤—ã–±–æ—Ä–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:', platform.name);
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    nextStep() {
        if (this.currentStep === 1 && this.selectedPlatform) {
            this.currentStep = 2;
            this.updateView();
            this.setupFormForPlatform();
        } else if (this.currentStep === 2 && this.isFormValid()) {
            this.currentStep = 3;
            this.updateView();
            this.startVerification();
        } else if (this.currentStep === 3) {
            this.addSource();
        }
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
    previousStep() {
        if (this.currentStep > 1) {
            this.currentStep--;
            this.updateView();
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    updateView() {
        console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ç–µ–∫—É—â–∏–π —à–∞–≥:', this.currentStep);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —à–∞–≥–æ–≤
        document.querySelectorAll('.enhanced-wizard-step').forEach((step, index) => {
            step.classList.remove('active');
            if (index + 1 === this.currentStep) {
                step.classList.add('active');
                console.log('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —à–∞–≥:', index + 1);
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        this.updateProgressIndicator();

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        this.updateNavigationButtons();
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏
        const nextBtn = document.getElementById('enhancedNextBtn');
        if (nextBtn) {
            console.log('–ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', {
                disabled: nextBtn.disabled,
                opacity: nextBtn.style.opacity,
                display: nextBtn.style.display
            });
        } else {
            console.error('–ö–Ω–æ–ø–∫–∞ enhancedNextBtn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    updateProgressIndicator() {
        const steps = document.querySelectorAll('.progress-step');
        const progressFill = document.querySelector('.progress-fill');

        steps.forEach((step, index) => {
            step.classList.remove('active', 'completed');
            if (index + 1 < this.currentStep) {
                step.classList.add('completed');
            } else if (index + 1 === this.currentStep) {
                step.classList.add('active');
            }
        });

        if (progressFill) {
            const progress = (this.currentStep / this.totalSteps) * 100;
            progressFill.style.width = `${progress}%`;
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    setupFormForPlatform() {
        if (!this.selectedPlatform) return;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã
        const formHeader = document.getElementById('enhancedFormHeader');
        if (formHeader) {
            formHeader.innerHTML = `
                <div class="enhanced-selected-platform">
                    <div class="selected-platform-icon">${this.selectedPlatform.icon}</div>
                    <div class="selected-platform-info">
                        <h3>${this.selectedPlatform.name}</h3>
                        <p>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞</p>
                        <div class="platform-features-list">
                            ${this.selectedPlatform.features.map(feature => 
                                `<span class="feature-chip">${this.getFeatureName(feature)}</span>`
                            ).join('')}
                        </div>
                    </div>
                </div>
            `;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º placeholder –∏ –ø–æ–º–æ—â—å
        const urlInput = document.getElementById('enhancedSourceUrl');
        const urlHelp = document.getElementById('enhancedUrlHelp');
        
        if (urlInput) {
            urlInput.placeholder = this.selectedPlatform.placeholder;
            urlInput.focus();
        }
        
        if (urlHelp) {
            urlHelp.textContent = this.selectedPlatform.help;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        this.updateFormFields();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    updateFormFields() {
        const formGrid = document.getElementById('enhancedFormGrid');
        if (!formGrid || !this.selectedPlatform) return;

        // –£–¥–∞–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
        const additionalFields = formGrid.querySelectorAll('.additional-field');
        additionalFields.forEach(field => field.remove());

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        if (this.selectedPlatform.id === 'telegram') {
            this.addTelegramFields(formGrid);
        } else if (this.selectedPlatform.id === 'vkontakte' || this.selectedPlatform.id === 'vk_groups') {
            this.addVKFields(formGrid);
        } else if (this.selectedPlatform.id === 'instagram') {
            this.addInstagramFields(formGrid);
        } else if (this.selectedPlatform.id === 'youtube') {
            this.addYouTubeFields(formGrid);
        } else if (this.selectedPlatform.id === 'rss') {
            this.addRSSFields(formGrid);
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è Telegram
    addTelegramFields(formGrid) {
        const telegramFieldsHTML = `
            <div class="form-group additional-field">
                <label class="form-label" for="telegramType">
                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
                    </svg>
                    –¢–∏–ø –∫–∞–Ω–∞–ª–∞
                </label>
                <select id="telegramType" class="enhanced-form-input">
                    <option value="public">–ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª</option>
                    <option value="private">–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª</option>
                    <option value="chat">–ß–∞—Ç/–≥—Ä—É–ø–ø–∞</option>
                </select>
                <div class="form-help">
                    –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø Telegram –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —á–∞—Ç–∞
                </div>
            </div>

            <div class="form-group additional-field">
                <label class="form-label" for="telegramToken">
                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-3.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 0121 9z"/>
                    </svg>
                    Bot Token (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                </label>
                <input 
                    type="password" 
                    id="telegramToken" 
                    class="enhanced-form-input" 
                    placeholder="1234567890:ABCDEFghijklmnopQRSTUVwxyz1234567890"
                />
                <div class="form-help">
                    –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)
                </div>
            </div>
        `;
        
        formGrid.insertAdjacentHTML('beforeend', telegramFieldsHTML);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
    addVKFields(formGrid) {
        const vkFieldsHTML = `
            <div class="form-group additional-field">
                <label class="form-label" for="vkAccessToken">
                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-3.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 0121 9z"/>
                    </svg>
                    Access Token (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                </label>
                <input 
                    type="password" 
                    id="vkAccessToken" 
                    class="enhanced-form-input" 
                    placeholder="vk1.a.aBcDeFgHiJkLmNoPqRsTuVwXyZ..."
                />
                <div class="form-help">
                    –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –∑–∞–∫—Ä—ã—Ç—ã—Ö –≥—Ä—É–ø–ø
                </div>
            </div>

            <div class="form-group additional-field">
                <label class="form-label" for="vkPostTypes">
                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                    </svg>
                    –¢–∏–ø—ã –ø–æ—Å—Ç–æ–≤
                </label>
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" value="text" checked> –¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã
                    </label>
                    <label class="checkbox-label">
                        <input type="checkbox" value="photo" checked> –§–æ—Ç–æ
                    </label>
                    <label class="checkbox-label">
                        <input type="checkbox" value="video"> –í–∏–¥–µ–æ
                    </label>
                    <label class="checkbox-label">
                        <input type="checkbox" value="link"> –°—Å—ã–ª–∫–∏
                    </label>
                </div>
                <div class="form-help">
                    –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
                </div>
            </div>
        `;
        
        formGrid.insertAdjacentHTML('beforeend', vkFieldsHTML);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è Instagram
    addInstagramFields(formGrid) {
        const instagramFieldsHTML = `
            <div class="form-group additional-field">
                <label class="form-label" for="instagramBusinessAccount">
                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2-2v2m8 0V6a2 2 0 01-2 2H10a2 2 0 01-2-2V4"/>
                    </svg>
                    –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
                </label>
                <select id="instagramBusinessAccount" class="enhanced-form-input">
                    <option value="personal">–õ–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç</option>
                    <option value="business">–ë–∏–∑–Ω–µ—Å –∞–∫–∫–∞—É–Ω—Ç</option>
                    <option value="creator">–ö—Ä–µ–∞—Ç–æ—Ä—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç</option>
                </select>
                <div class="form-help">
                    –î–ª—è –±–∏–∑–Ω–µ—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                </div>
            </div>

            <div class="form-group additional-field">
                <label class="form-label" for="instagramContentFilter">
                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.207A1 1 0 013 6.5V4z"/>
                    </svg>
                    –§–∏–ª—å—Ç—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                </label>
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" value="posts" checked> –ü–æ—Å—Ç—ã
                    </label>
                    <label class="checkbox-label">
                        <input type="checkbox" value="stories"> Stories
                    </label>
                    <label class="checkbox-label">
                        <input type="checkbox" value="reels" checked> Reels
                    </label>
                    <label class="checkbox-label">
                        <input type="checkbox" value="igtv"> IGTV
                    </label>
                </div>
                <div class="form-help">
                    –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
                </div>
            </div>
        `;
        
        formGrid.insertAdjacentHTML('beforeend', instagramFieldsHTML);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è YouTube
    addYouTubeFields(formGrid) {
        const youtubeFieldsHTML = `
            <div class="form-group additional-field">
                <label class="form-label" for="youtubeApiKey">
                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-3.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 0121 9z"/>
                    </svg>
                    YouTube API Key (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                </label>
                <input 
                    type="password" 
                    id="youtubeApiKey" 
                    class="enhanced-form-input" 
                    placeholder="AIzaSyA1B2C3D4E5F6G7H8I9J0K1L2M3N4O5P6Q"
                />
                <div class="form-help">
                    API –∫–ª—é—á –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
                </div>
            </div>

            <div class="form-group additional-field">
                <label class="form-label" for="youtubeContentType">
                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"/>
                    </svg>
                    –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                </label>
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" value="title_description" checked> –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
                    </label>
                    <label class="checkbox-label">
                        <input type="checkbox" value="transcript"> –°—É–±—Ç–∏—Ç—Ä—ã/—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
                    </label>
                    <label class="checkbox-label">
                        <input type="checkbox" value="comments"> –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                    </label>
                    <label class="checkbox-label">
                        <input type="checkbox" value="metadata"> –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    </label>
                </div>
                <div class="form-help">
                    –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤
                </div>
            </div>
        `;
        
        formGrid.insertAdjacentHTML('beforeend', youtubeFieldsHTML);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è RSS
    addRSSFields(formGrid) {
        const rssFieldsHTML = `
            <div class="form-group additional-field">
                <label class="form-label" for="rssUpdateFrequency">
                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                    </svg>
                    –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                </label>
                <select id="rssUpdateFrequency" class="enhanced-form-input">
                    <option value="15">–ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç</option>
                    <option value="30">–ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç</option>
                    <option value="60" selected>–ö–∞–∂–¥—ã–π —á–∞—Å</option>
                    <option value="180">–ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞</option>
                    <option value="360">–ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤</option>
                    <option value="720">–ö–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤</option>
                    <option value="1440">–†–∞–∑ –≤ –¥–µ–Ω—å</option>
                </select>
                <div class="form-help">
                    –ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ RSS-–ª–µ–Ω—Ç–µ
                </div>
            </div>

            <div class="form-group additional-field">
                <label class="form-label" for="rssContentFilter">
                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.207A1 1 0 013 6.5V4z"/>
                    </svg>
                    –§–∏–ª—å—Ç—Ä –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                </label>
                <input 
                    type="text" 
                    id="rssContentFilter" 
                    class="enhanced-form-input" 
                    placeholder="—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, AI, —Å—Ç–∞—Ä—Ç–∞–ø—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"
                />
                <div class="form-help">
                    –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                </div>
            </div>
        `;
        
        formGrid.insertAdjacentHTML('beforeend', rssFieldsHTML);
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    validateUrl() {
        const urlInput = document.getElementById('enhancedSourceUrl');
        const validation = document.getElementById('urlValidation');
        
        if (!urlInput || !validation) return;

        const url = urlInput.value.trim();
        
        if (!url) {
            validation.textContent = '';
            validation.className = 'validation-message';
            return;
        }

        const validationResult = this.validatePlatformUrl(url);
        
        if (validationResult.isValid) {
            validation.textContent = validationResult.message;
            validation.className = 'validation-message success';
            this.validationResults.url = true;
        } else {
            validation.textContent = validationResult.message;
            validation.className = 'validation-message error';
            this.validationResults.url = false;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    validatePlatformUrl(url) {
        if (!this.selectedPlatform) {
            return { isValid: false, message: '‚úó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É' };
        }

        const platformId = this.selectedPlatform.id;
        
        switch (platformId) {
            case 'telegram':
                return this.validateTelegramUrl(url);
            case 'vkontakte':
            case 'vk_groups':
                return this.validateVKUrl(url);
            case 'instagram':
                return this.validateInstagramUrl(url);
            case 'youtube':
                return this.validateYouTubeUrl(url);
            case 'facebook':
                return this.validateFacebookUrl(url);
            case 'tiktok':
                return this.validateTikTokUrl(url);
            case 'twitter':
                return this.validateTwitterUrl(url);
            case 'linkedin':
                return this.validateLinkedInUrl(url);
            case 'rss':
                return this.validateRSSUrl(url);
            default:
                return this.isValidUrl(url) ? 
                    { isValid: true, message: '‚úì URL –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω' } : 
                    { isValid: false, message: '‚úó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL' };
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è Telegram URL
    validateTelegramUrl(url) {
        const telegramPatterns = [
            /^https?:\/\/t\.me\/[a-zA-Z0-9_]{5,32}$/,
            /^@[a-zA-Z0-9_]{5,32}$/,
            /^[a-zA-Z0-9_]{5,32}$/
        ];

        for (let pattern of telegramPatterns) {
            if (pattern.test(url)) {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º username –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                let username = url;
                if (url.includes('t.me/')) {
                    username = url.split('t.me/')[1];
                } else if (url.startsWith('@')) {
                    username = url.substring(1);
                }
                
                this.formData.extractedUsername = username;
                return { 
                    isValid: true, 
                    message: `‚úì Telegram –∫–∞–Ω–∞–ª @${username} –Ω–∞–π–¥–µ–Ω` 
                };
            }
        }

        return { 
            isValid: false, 
            message: '‚úó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: https://t.me/channel, @channel –∏–ª–∏ channel' 
        };
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è VK URL
    validateVKUrl(url) {
        const vkPatterns = [
            /^https?:\/\/vk\.com\/[a-zA-Z0-9_.]{1,50}$/,
            /^https?:\/\/vk\.com\/public\d+$/,
            /^https?:\/\/vk\.com\/club\d+$/,
            /^https?:\/\/vk\.com\/id\d+$/
        ];

        for (let pattern of vkPatterns) {
            if (pattern.test(url)) {
                return { isValid: true, message: '‚úì –í–ö–æ–Ω—Ç–∞–∫—Ç–µ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞' };
            }
        }

        return { 
            isValid: false, 
            message: '‚úó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: https://vk.com/page_name' 
        };
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è Instagram URL
    validateInstagramUrl(url) {
        const instagramPatterns = [
            /^https?:\/\/(?:www\.)?instagram\.com\/[a-zA-Z0-9_.]{1,30}\/?$/,
            /^@[a-zA-Z0-9_.]{1,30}$/
        ];

        for (let pattern of instagramPatterns) {
            if (pattern.test(url)) {
                return { isValid: true, message: '‚úì Instagram –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω' };
            }
        }

        return { 
            isValid: false, 
            message: '‚úó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: https://instagram.com/username –∏–ª–∏ @username' 
        };
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è YouTube URL
    validateYouTubeUrl(url) {
        const youtubePatterns = [
            /^https?:\/\/(?:www\.)?youtube\.com\/channel\/[a-zA-Z0-9_-]{24}$/,
            /^https?:\/\/(?:www\.)?youtube\.com\/c\/[a-zA-Z0-9_-]+$/,
            /^https?:\/\/(?:www\.)?youtube\.com\/@[a-zA-Z0-9_.-]+$/,
            /^https?:\/\/(?:www\.)?youtube\.com\/user\/[a-zA-Z0-9_-]+$/
        ];

        for (let pattern of youtubePatterns) {
            if (pattern.test(url)) {
                return { isValid: true, message: '‚úì YouTube –∫–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω' };
            }
        }

        return { 
            isValid: false, 
            message: '‚úó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª YouTube' 
        };
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è Facebook URL
    validateFacebookUrl(url) {
        const facebookPatterns = [
            /^https?:\/\/(?:www\.)?facebook\.com\/[a-zA-Z0-9.]{5,50}\/?$/,
            /^https?:\/\/(?:www\.)?facebook\.com\/pages\/[^\/]+\/\d+\/?$/
        ];

        for (let pattern of facebookPatterns) {
            if (pattern.test(url)) {
                return { isValid: true, message: '‚úì Facebook —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞' };
            }
        }

        return { 
            isValid: false, 
            message: '‚úó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Facebook' 
        };
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è TikTok URL
    validateTikTokUrl(url) {
        const tiktokPatterns = [
            /^https?:\/\/(?:www\.)?tiktok\.com\/@[a-zA-Z0-9_.]{2,24}$/,
            /^@[a-zA-Z0-9_.]{2,24}$/
        ];

        for (let pattern of tiktokPatterns) {
            if (pattern.test(url)) {
                return { isValid: true, message: '‚úì TikTok –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω' };
            }
        }

        return { 
            isValid: false, 
            message: '‚úó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: https://tiktok.com/@username –∏–ª–∏ @username' 
        };
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è Twitter URL
    validateTwitterUrl(url) {
        const twitterPatterns = [
            /^https?:\/\/(?:www\.)?twitter\.com\/[a-zA-Z0-9_]{1,15}$/,
            /^https?:\/\/(?:www\.)?x\.com\/[a-zA-Z0-9_]{1,15}$/,
            /^@[a-zA-Z0-9_]{1,15}$/
        ];

        for (let pattern of twitterPatterns) {
            if (pattern.test(url)) {
                return { isValid: true, message: '‚úì Twitter/X –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω' };
            }
        }

        return { 
            isValid: false, 
            message: '‚úó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: https://twitter.com/username –∏–ª–∏ @username' 
        };
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è LinkedIn URL
    validateLinkedInUrl(url) {
        const linkedinPatterns = [
            /^https?:\/\/(?:www\.)?linkedin\.com\/company\/[a-zA-Z0-9-]{2,100}\/?$/,
            /^https?:\/\/(?:www\.)?linkedin\.com\/in\/[a-zA-Z0-9-]{3,100}\/?$/
        ];

        for (let pattern of linkedinPatterns) {
            if (pattern.test(url)) {
                return { isValid: true, message: '‚úì LinkedIn –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω' };
            }
        }

        return { 
            isValid: false, 
            message: '‚úó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ LinkedIn –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é' 
        };
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è RSS URL
    validateRSSUrl(url) {
        try {
            const urlObj = new URL(url);
            if (urlObj.protocol === 'http:' || urlObj.protocol === 'https:') {
                return { isValid: true, message: '‚úì RSS —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞' };
            }
        } catch (e) {
            // URL –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
        }

        return { 
            isValid: false, 
            message: '‚úó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è RSS —Å—Å—ã–ª–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω—ã–π URL' 
        };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL (–æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    isValidUrl(url) {
        try {
            new URL(url);
            return true;
        } catch {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç @username –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
            return url.startsWith('@') && url.length > 1;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã
    isFormValid() {
        return this.formData.url && 
               this.formData.url.length > 0 && 
               this.isValidUrl(this.formData.url);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    updateNavigationButtons() {
        const backBtn = document.getElementById('enhancedBackBtn');
        const nextBtn = document.getElementById('enhancedNextBtn');

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        if (backBtn) {
            backBtn.style.display = this.currentStep === 1 ? 'none' : 'flex';
        }

        // –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" / "–î–æ–±–∞–≤–∏—Ç—å"
        if (nextBtn) {
            if (this.currentStep === this.totalSteps) {
                nextBtn.innerHTML = `
                    <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                    </svg>
                    –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫
                `;
            } else {
                nextBtn.innerHTML = `
                    –î–∞–ª–µ–µ
                    <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                    </svg>
                `;
            }
        }

        this.updateNextButton();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ"
    updateNextButton() {
        const nextBtn = document.getElementById('enhancedNextBtn');
        if (!nextBtn) return;

        let isValid = false;

        if (this.currentStep === 1) {
            isValid = !!this.selectedPlatform;
        } else if (this.currentStep === 2) {
            isValid = this.isFormValid();
        } else if (this.currentStep === 3) {
            isValid = this.validationResults.verification === true;
        }

        nextBtn.disabled = !isValid;
        nextBtn.style.opacity = isValid ? '1' : '0.5';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∞–≥–∞
        nextBtn.style.display = 'flex';
        
        console.log(`–ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" - –®–∞–≥: ${this.currentStep}, –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: ${isValid}, –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${this.selectedPlatform?.name || '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'}`);
    }

    // –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    async startVerification() {
        this.validationResults.verification = false;
        
        const checks = ['urlCheck', 'contentCheck', 'apiCheck'];
        const delays = [800, 1600, 2400];
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        for (let i = 0; i < checks.length; i++) {
            setTimeout(() => {
                this.updateCheckStatus(checks[i], 'checking');
            }, delays[i] / 3);
            
            setTimeout(async () => {
                let success = false;
                
                if (checks[i] === 'urlCheck') {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
                    success = await this.performUrlCheck();
                } else if (checks[i] === 'contentCheck') {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    success = await this.performContentCheck();
                } else if (checks[i] === 'apiCheck') {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å API
                    success = await this.performApiCheck();
                }
                
                this.updateCheckStatus(checks[i], success ? 'success' : 'error');
                
                if (i === checks.length - 1) {
                    // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                    this.completeVerification();
                }
            }, delays[i]);
        }
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ URL
    async performUrlCheck() {
        if (!this.selectedPlatform || !this.formData.url) {
            return false;
        }

        // –î–ª—è Telegram –≤—ã–ø–æ–ª–Ω—è–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        if (this.selectedPlatform.id === 'telegram') {
            return await this.checkTelegramChannel();
        }

        // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        return await this.checkBasicUrlAccess();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –∫–∞–Ω–∞–ª–∞
    async checkTelegramChannel() {
        try {
            const url = this.formData.url;
            let username = this.formData.extractedUsername;
            
            if (!username) {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ URL
                if (url.includes('t.me/')) {
                    username = url.split('t.me/')[1];
                } else if (url.startsWith('@')) {
                    username = url.substring(1);
                } else {
                    username = url;
                }
            }

            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ Telegram API
            const isValid = await this.simulateTelegramCheck(username);
            
            if (isValid) {
                this.formData.verifiedUsername = username;
                this.formData.channelInfo = {
                    title: `–ö–∞–Ω–∞–ª @${username}`,
                    subscribers: Math.floor(Math.random() * 10000) + 1000,
                    isPublic: !url.includes('joinchat'),
                    lastPost: new Date().toISOString()
                };
                return true;
            }
            
            return false;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –∫–∞–Ω–∞–ª–∞:', error);
            return false;
        }
    }

    // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –∫–∞–Ω–∞–ª–∞
    async simulateTelegramCheck(username) {
        return new Promise((resolve) => {
            setTimeout(() => {
                // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ username
                const isValidUsername = /^[a-zA-Z0-9_]{5,32}$/.test(username);
                const isAccessible = Math.random() > 0.15; // 85% –∫–∞–Ω–∞–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã
                
                resolve(isValidUsername && isAccessible);
            }, 500);
        });
    }

    // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ URL
    async checkBasicUrlAccess() {
        return new Promise((resolve) => {
            setTimeout(() => {
                // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                const validationResult = this.validatePlatformUrl(this.formData.url);
                const isAccessible = Math.random() > 0.1; // 90% –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã
                
                resolve(validationResult.isValid && isAccessible);
            }, 300);
        });
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    async performContentCheck() {
        return new Promise((resolve) => {
            setTimeout(() => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                const hasContent = Math.random() > 0.1; // 90% –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–º–µ—é—Ç –∫–æ–Ω—Ç–µ–Ω—Ç
                
                if (hasContent && this.selectedPlatform.id === 'telegram') {
                    // –î–ª—è Telegram –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    this.formData.contentInfo = {
                        postsCount: Math.floor(Math.random() * 500) + 50,
                        averagePostsPerDay: Math.floor(Math.random() * 10) + 1,
                        lastActivity: new Date().toISOString()
                    };
                }
                
                resolve(hasContent);
            }, 400);
        });
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ API
    async performApiCheck() {
        return new Promise((resolve) => {
            setTimeout(() => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –Ω–∞—à–∏–º–∏ API
                const isCompatible = Math.random() > 0.05; // 95% —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
                
                resolve(isCompatible);
            }, 300);
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
    updateCheckStatus(checkId, status) {
        const checkElement = document.getElementById(checkId);
        if (!checkElement) return;
        
        const indicator = checkElement.querySelector('.status-indicator');
        const text = checkElement.querySelector('span');
        
        indicator.className = `status-indicator ${status}`;
        
        const statusTexts = {
            'pending': '–û–∂–∏–¥–∞–Ω–∏–µ...',
            'checking': '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è...',
            'success': '–£—Å–ø–µ—à–Ω–æ',
            'error': '–û—à–∏–±–∫–∞'
        };
        
        text.textContent = statusTexts[status];
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    completeVerification() {
        const verificationIcon = document.getElementById('verificationIcon');
        const verificationTitle = document.getElementById('verificationTitle');
        const verificationDescription = document.getElementById('verificationDescription');
        const sourcePreview = document.getElementById('sourcePreview');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        const allChecks = document.querySelectorAll('.status-indicator');
        const successfulChecks = Array.from(allChecks).filter(check => 
            check.classList.contains('success')
        );
        
        const isSuccessful = successfulChecks.length >= 2;
        
        if (isSuccessful) {
            verificationIcon.innerHTML = `
                <svg width="48" height="48" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="color: #34C759;">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
            `;
            verificationTitle.textContent = '–ò—Å—Ç–æ—á–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω!';
            verificationDescription.textContent = '–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –∏—Å—Ç–æ—á–Ω–∏–∫ –≥–æ—Ç–æ–≤ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
            if (sourcePreview) {
                sourcePreview.style.display = 'block';
                this.showSourcePreview();
            }
            
            this.validationResults.verification = true;
        } else {
            verificationIcon.innerHTML = `
                <svg width="48" height="48" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="color: #FF3B30;">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.888-.833-2.464 0L4.34 16.5c-.77.833.192 2.5 1.732 2.5z"/>
                </svg>
            `;
            verificationTitle.textContent = '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º';
            verificationDescription.textContent = '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.';
            
            this.validationResults.verification = false;
        }
        
        this.updateNextButton();
    }

    // –ü–æ–∫–∞–∑ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    showSourcePreview() {
        const previewContent = document.getElementById('previewContent');
        if (!previewContent) return;
        
        let previewData;
        
        if (this.selectedPlatform.id === 'telegram' && this.formData.channelInfo) {
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è Telegram
            previewData = {
                title: this.formData.name || this.formData.channelInfo.title,
                description: this.formData.description || `Telegram –∫–∞–Ω–∞–ª @${this.formData.verifiedUsername}`,
                posts: this.formData.contentInfo?.postsCount || 0,
                subscribers: this.formData.channelInfo.subscribers,
                engagement: this.formData.contentInfo?.averagePostsPerDay + ' –ø–æ—Å—Ç–æ–≤/–¥–µ–Ω—å' || '–ù–æ–≤—ã–π',
                lastUpdate: new Date(this.formData.channelInfo.lastPost).toLocaleDateString('ru-RU'),
                isPublic: this.formData.channelInfo.isPublic
            };
            
            previewContent.innerHTML = `
                <div class="preview-card telegram-preview">
                    <div class="preview-header">
                        <div class="preview-icon">${this.selectedPlatform.icon}</div>
                        <div class="preview-info">
                            <h4>${previewData.title}</h4>
                            <p>${previewData.description}</p>
                            <div class="telegram-badges">
                                <span class="telegram-badge ${previewData.isPublic ? 'public' : 'private'}">
                                    ${previewData.isPublic ? 'üåê –ü—É–±–ª–∏—á–Ω—ã–π' : 'üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π'}
                                </span>
                                <span class="telegram-badge verified">‚úì –ü—Ä–æ–≤–µ—Ä–µ–Ω</span>
                            </div>
                        </div>
                    </div>
                    <div class="preview-stats">
                        <div class="preview-stat">
                            <span class="stat-value">${previewData.posts}</span>
                            <span class="stat-label">–ü–æ—Å—Ç–æ–≤</span>
                        </div>
                        <div class="preview-stat">
                            <span class="stat-value">${previewData.subscribers.toLocaleString()}</span>
                            <span class="stat-label">–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</span>
                        </div>
                        <div class="preview-stat">
                            <span class="stat-value">${previewData.engagement}</span>
                            <span class="stat-label">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</span>
                        </div>
                        <div class="preview-stat">
                            <span class="stat-value">${previewData.lastUpdate}</span>
                            <span class="stat-label">–û–±–Ω–æ–≤–ª–µ–Ω</span>
                        </div>
                    </div>
                    <div class="telegram-info">
                        <div class="info-item">
                            <span class="info-label">–ò–º—è –∫–∞–Ω–∞–ª–∞:</span>
                            <span class="info-value">@${this.formData.verifiedUsername}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">–¢–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞:</span>
                            <span class="info-value">Telegram ${previewData.isPublic ? '–∫–∞–Ω–∞–ª' : '–≥—Ä—É–ø–ø–∞'}</span>
                        </div>
                    </div>
                </div>
            `;
        } else {
            // –û–±—ã—á–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
            const mockData = {
                title: this.formData.name || `–ò—Å—Ç–æ—á–Ω–∏–∫ ${this.selectedPlatform.name}`,
                description: this.formData.description || '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
                posts: Math.floor(Math.random() * 1000) + 100,
                engagement: (Math.random() * 10 + 5).toFixed(1) + 'K',
                lastUpdate: new Date().toLocaleDateString('ru-RU')
            };
            
            previewContent.innerHTML = `
                <div class="preview-card">
                    <div class="preview-header">
                        <div class="preview-icon">${this.selectedPlatform.icon}</div>
                        <div class="preview-info">
                            <h4>${mockData.title}</h4>
                            <p>${mockData.description}</p>
                        </div>
                    </div>
                    <div class="preview-stats">
                        <div class="preview-stat">
                            <span class="stat-value">${mockData.posts}</span>
                            <span class="stat-label">–ü–æ—Å—Ç–æ–≤</span>
                        </div>
                        <div class="preview-stat">
                            <span class="stat-value">${mockData.engagement}</span>
                            <span class="stat-label">–û—Ö–≤–∞—Ç</span>
                        </div>
                        <div class="preview-stat">
                            <span class="stat-value">${mockData.lastUpdate}</span>
                            <span class="stat-label">–û–±–Ω–æ–≤–ª–µ–Ω</span>
                        </div>
                    </div>
                </div>
            `;
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    async addSource() {
        const nextBtn = document.getElementById('enhancedNextBtn');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        if (nextBtn) {
            nextBtn.innerHTML = `
                <div class="loading-spinner"></div>
                –î–æ–±–∞–≤–ª–µ–Ω–∏–µ...
            `;
            nextBtn.disabled = true;
        }

        try {
            // –°–∏–º—É–ª—è—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞
            await this.simulateConnection();

            // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
            this.addToAvailableSources();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
            const sourcesCount = window.aiAutopostingWizard?.availableSources?.length || 0;
            const isFirstSource = sourcesCount === 1;
            
            if (isFirstSource) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                setTimeout(() => {
                    this.showFirstSourceNotification();
                }, 500);
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                this.showNotification(`–ò—Å—Ç–æ—á–Ω–∏–∫ "${this.formData.platformName}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`, 'success');

                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                setTimeout(() => {
                    this.close();
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–∞—Å—Ç–µ—Ä–µ
                    if (window.aiAutopostingWizard && window.aiAutopostingWizard.renderSourcesGrid) {
                        window.aiAutopostingWizard.renderSourcesGrid();
                    }
                }, 1500);
            }

        } catch (error) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
            if (nextBtn) {
                nextBtn.innerHTML = `
                    <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                    </svg>
                    –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫
                `;
                nextBtn.disabled = false;
            }

            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞', 'error');
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞:', error);
        }
    }
    
    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    showFirstSourceNotification() {
        const sourceName = this.formData.name || this.formData.platformName;
        
        // –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const modalContent = document.querySelector('.enhanced-source-modal-content');
        if (!modalContent) return;
        
        modalContent.innerHTML = `
            <div class="enhanced-source-modal-header">
                <div>
                    <h2 class="enhanced-source-modal-title">üéâ –ü–µ—Ä–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</h2>
                    <p class="enhanced-source-modal-subtitle">–ò—Å—Ç–æ—á–Ω–∏–∫ "${sourceName}" –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</p>
                </div>
                <button class="enhanced-source-modal-close" onclick="enhancedSourceModal.close()" aria-label="–ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ">√ó</button>
            </div>
            
            <div class="first-source-notification">
                <div class="notification-content">
                    <div class="notification-icon">
                        <svg width="64" height="64" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                        </svg>
                    </div>
                    
                    <div class="notification-message">
                        <h3>–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ!</h3>
                        <p>–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞:</p>
                    </div>
                    
                    <div class="notification-options">
                        <div class="option-card" onclick="enhancedSourceModal.addMoreSources()">
                            <div class="option-icon">
                                <svg width="32" height="32" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                                </svg>
                            </div>
                            <div class="option-content">
                                <h4>–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏</h4>
                                <p>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –±–æ–ª–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</p>
                            </div>
                            <div class="option-arrow">
                                <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                                </svg>
                            </div>
                        </div>
                        
                        <div class="option-card primary" onclick="enhancedSourceModal.proceedToSetupAutoSMM()">
                            <div class="option-icon">
                                <svg width="32" height="32" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
                                </svg>
                            </div>
                            <div class="option-content">
                                <h4>–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ AutoSMM</h4>
                                <p>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–æ–≤ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å</p>
                            </div>
                            <div class="option-arrow">
                                <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                                </svg>
                            </div>
                        </div>
                    </div>
                    
                    <div class="notification-stats">
                        <div class="stat-item">
                            <span class="stat-number">1</span>
                            <span class="stat-label">–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-number">‚àû</span>
                            <span class="stat-label">–ü–æ—Å—Ç–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-number">24/7</span>
                            <span class="stat-label">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞</span>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        console.log('–ü–æ–∫–∞–∑–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–≤–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ');
    }

    // –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    addMoreSources() {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤');
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.close();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (window.showNotification) {
            window.showNotification('–î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è', 'info');
        }
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(() => {
            this.open();
        }, 500);
    }

    // –ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ AutoSMM
    proceedToSetupAutoSMM() {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ AutoSMM');
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.close();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        if (window.showNotification) {
            window.showNotification('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ AutoSMM –Ω–∞–±–æ—Ä–∞ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –¥–ª—è AI –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞', 'success');
        }
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –º–∞—Å—Ç–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–±–æ—Ä–∞
        if (window.aiAutopostingWizard && window.aiAutopostingWizard.nextStep) {
            setTimeout(() => {
                window.aiAutopostingWizard.nextStep();
            }, 800);
        } else if (window.contentManager) {
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AutoSMM
            setTimeout(() => {
                window.contentManager.showPage('createAIAutopostingSet', '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ AutoSMM –Ω–∞–±–æ—Ä–∞');
            }, 800);
        }
    }

    // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    async simulateConnection() {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                // –°–∏–º—É–ª—è—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –æ—à–∏–±–∫–∏ (5% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
                if (Math.random() < 0.05) {
                    reject(new Error('Connection failed'));
                } else {
                    resolve();
                }
            }, 1500);
        });
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    addToAvailableSources() {
        if (!window.aiAutopostingWizard) return;

        let sourceStats = { posts: Math.floor(Math.random() * 1000) + 100, engagement: '–ù–æ–≤—ã–π' };
        let sourceName = this.formData.name || `${this.formData.platformName} –ò—Å—Ç–æ—á–Ω–∏–∫`;
        let sourceDescription = this.formData.description || `–ö–æ–Ω—Ç–µ–Ω—Ç –∏–∑ ${this.formData.platformName}`;

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Telegram
        if (this.selectedPlatform.id === 'telegram' && this.formData.channelInfo) {
            sourceName = this.formData.name || this.formData.channelInfo.title;
            sourceDescription = this.formData.description || `Telegram –∫–∞–Ω–∞–ª @${this.formData.verifiedUsername}`;
            sourceStats = {
                posts: this.formData.contentInfo?.postsCount || 0,
                engagement: this.formData.channelInfo.subscribers ? 
                    this.formData.channelInfo.subscribers.toLocaleString() + ' –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤' : 
                    '–ù–æ–≤—ã–π –∫–∞–Ω–∞–ª'
            };
        }

        const newSource = {
            id: Date.now() + Math.random(), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            name: sourceName,
            description: sourceDescription,
            type: this.formData.platform,
            icon: this.formData.platformIcon,
            url: this.formData.url,
            stats: sourceStats,
            active: true,
            isNew: true,
            verified: true,
            additionalFields: this.formData.additionalFields,
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram
            ...(this.selectedPlatform.id === 'telegram' && {
                telegramData: {
                    username: this.formData.verifiedUsername,
                    channelInfo: this.formData.channelInfo,
                    contentInfo: this.formData.contentInfo,
                    isPublic: this.formData.channelInfo?.isPublic
                }
            })
        };

        window.aiAutopostingWizard.availableSources.push(newSource);
        console.log('–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫:', newSource);
    }

    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    showNotification(message, type) {
        const notification = document.createElement('div');
        notification.className = `enhanced-source-notification notification-${type}`;
        notification.textContent = message;
        
        notification.style.cssText = `
            position: fixed;
            top: 24px;
            right: 24px;
            background: ${type === 'success' ? '#34C759' : type === 'error' ? '#FF3B30' : '#007AFF'};
            color: white;
            padding: 16px 24px;
            border-radius: 16px;
            backdrop-filter: blur(20px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
            z-index: 10001;
            animation: slideInRight 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            max-width: 400px;
            font-weight: 500;
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.4s cubic-bezier(0.4, 0, 0.2, 1)';
            setTimeout(() => {
                if (notification.parentNode) {
                    document.body.removeChild(notification);
                }
            }, 400);
        }, 4000);
    }

    // –°–±—Ä–æ—Å –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    reset() {
        console.log('–°–±—Ä–æ—Å –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞...');
        this.currentStep = 1;
        this.selectedPlatform = null;
        this.validationResults = {};
        this.formData = {
            platform: '',
            platformName: '',
            platformIcon: '',
            url: '',
            name: '',
            description: '',
            additionalFields: {}
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.enhancedSourceModal = new EnhancedSourceModal();

// –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –≤ –∫–Ω–æ–ø–∫–µ
if (window.sourceModal) {
    // –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –º–æ–¥–∞–ª –Ω–∞ –Ω–æ–≤—ã–π
    window.sourceModal = window.enhancedSourceModal;
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
if (!document.querySelector('#enhanced-source-modal-animation-styles')) {
    const style = document.createElement('style');
    style.id = 'enhanced-source-modal-animation-styles';
    style.textContent = `
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        @keyframes slideInRight {
            from {
                opacity: 0;
                transform: translateX(100%);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }
        
        @keyframes slideOutRight {
            from {
                opacity: 1;
                transform: translateX(0);
            }
            to {
                opacity: 0;
                transform: translateX(100%);
            }
        }
    `;
    document.head.appendChild(style);
}