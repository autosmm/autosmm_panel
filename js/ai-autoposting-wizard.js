// –ú–æ–¥—É–ª—å –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–±–æ—Ä–æ–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ AI –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
// –í —Å—Ç–∏–ª–µ Apple iOS 26 "Liquid Glass"

class AIAutopostingWizard {
    constructor() {
        this.currentStep = 1;
        this.totalSteps = 4;
        this.formData = {
            setName: '',
            setDescription: '',
            isActive: false,
            selectedSources: [],
            platformSettings: {
                vk: {
                    frequency: 2,
                    startTime: 8,
                    endTime: 22,
                    style: 'casual'
                },
                telegram: {
                    frequency: 4,
                    startTime: 9,
                    endTime: 21,
                    style: 'engaging'
                }
            }
        };
        this.availableSources = [];
        this.isInitialized = false;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä–∞
    init() {
        if (this.isInitialized) return;
        
        this.loadAvailableSources();
        this.initializeEventListeners();
        this.updateView();
        this.isInitialized = true;
        
        console.log('AI Autoposting Wizard –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    loadAvailableSources() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—ã–ª –±—ã API –∑–∞–ø—Ä–æ—Å
        this.availableSources = [
            {
                id: 1,
                name: 'TechCrunch',
                description: '–ù–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤',
                type: 'rss',
                icon: 'üì°',
                stats: { posts: 150, engagement: '8.5K' },
                active: true
            },
            {
                id: 2,
                name: '–•–∞–±—Ä',
                description: 'IT-—Å–æ–æ–±—â–µ—Å—Ç–≤–æ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞',
                type: 'rss',
                icon: 'üíª',
                stats: { posts: 89, engagement: '12.3K' },
                active: true
            },
            {
                id: 3,
                name: 'Telegram Tech News',
                description: '–ö–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏–∑ –º–∏—Ä–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π',
                type: 'telegram',
                icon: 'üì±',
                stats: { posts: 203, engagement: '5.7K' },
                active: true
            },
            {
                id: 4,
                name: 'AI Research Papers',
                description: '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –ò–ò',
                type: 'rss',
                icon: 'ü§ñ',
                stats: { posts: 67, engagement: '4.2K' },
                active: true
            },
            {
                id: 5,
                name: 'Startup News',
                description: '–ù–æ–≤–æ—Å—Ç–∏ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π',
                type: 'website',
                icon: 'üöÄ',
                stats: { posts: 124, engagement: '9.1K' },
                active: true
            },
            {
                id: 6,
                name: 'YouTube Tech Reviews',
                description: '–û–±–∑–æ—Ä—ã –≥–∞–¥–∂–µ—Ç–æ–≤ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π',
                type: 'youtube',
                icon: 'üé•',
                stats: { posts: 45, engagement: '15.8K' },
                active: true
            }
        ];
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    initializeEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–∏–≤—è–∑–∫–∏
        this.setupFormInputListeners();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º
        this.initializePlatformSettings();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
    setupFormInputListeners() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        document.addEventListener('input', (e) => {
            if (e.target.id === 'setName') {
                this.formData.setName = e.target.value.trim();
                console.log('–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', this.formData.setName);
                this.validateCurrentStep();
            } else if (e.target.id === 'setDescription') {
                this.formData.setDescription = e.target.value.trim();
                console.log('–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', this.formData.setDescription);
            }
        });

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
        document.addEventListener('blur', (e) => {
            if (e.target.id === 'setName') {
                this.formData.setName = e.target.value.trim();
                this.validateCurrentStep();
            }
        }, true);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–ª–∞–≤–∏—à
        document.addEventListener('keyup', (e) => {
            if (e.target.id === 'setName') {
                this.formData.setName = e.target.value.trim();
                this.validateCurrentStep();
            }
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º
    initializePlatformSettings() {
        const platformInputs = document.querySelectorAll('[id^="vk"], [id^="telegram"]');
        platformInputs.forEach(input => {
            input.addEventListener('change', (e) => {
                this.updatePlatformSettings(e.target);
            });
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    updatePlatformSettings(input) {
        const platform = input.id.startsWith('vk') ? 'vk' : 'telegram';
        const setting = input.id.replace(platform, '').toLowerCase();
        
        this.formData.platformSettings[platform][setting] = input.value;
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞–±–æ—Ä–∞
    toggleSetActive() {
        this.formData.isActive = !this.formData.isActive;
        const toggle = document.getElementById('activeToggle');
        
        if (toggle) {
            if (this.formData.isActive) {
                toggle.classList.add('active');
            } else {
                toggle.classList.remove('active');
            }
        }
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    nextStep() {
        console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É...');
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
        if (this.currentStep === 1) {
            const setNameInput = document.getElementById('setName');
            if (setNameInput) {
                this.formData.setName = setNameInput.value.trim();
                console.log('–û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –ø–µ—Ä–µ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π:', this.formData.setName);
            }
        }
        
        const isValid = this.validateCurrentStep();
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', isValid);
        
        if (isValid) {
            if (this.currentStep < this.totalSteps) {
                this.currentStep++;
                this.updateView();
                
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤
                if (this.currentStep === 2) {
                    this.renderSourcesGrid();
                } else if (this.currentStep === 4) {
                    this.renderPreview();
                }
                
                console.log('–ü–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É:', this.currentStep);
            } else {
                this.createSet();
            }
        } else {
            console.log('–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞, –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ');
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ —Å –æ—à–∏–±–∫–æ–π
            if (this.currentStep === 1) {
                const setNameInput = document.getElementById('setName');
                if (setNameInput) {
                    setNameInput.focus();
                }
            }
        }
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
    previousStep() {
        if (this.currentStep > 1) {
            this.currentStep--;
            this.updateView();
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    updateView() {
        this.updateProgressIndicator();
        this.updateStepVisibility();
        this.updateNavigationButtons();
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏, —á—Ç–æ–±—ã DOM —É—Å–ø–µ–ª –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
        setTimeout(() => {
            this.validateCurrentStep();
        }, 100);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    updateProgressIndicator() {
        const steps = document.querySelectorAll('.progress-step');
        const progressLine = document.querySelector('.progress-line');
        
        steps.forEach((step, index) => {
            const stepNumber = index + 1;
            step.classList.remove('active', 'completed');
            
            if (stepNumber < this.currentStep) {
                step.classList.add('completed');
                step.querySelector('.step-circle').textContent = '‚úì';
            } else if (stepNumber === this.currentStep) {
                step.classList.add('active');
                step.querySelector('.step-circle').textContent = stepNumber;
            } else {
                step.querySelector('.step-circle').textContent = stepNumber;
            }
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if (progressLine) {
            const progressWidth = ((this.currentStep - 1) / (this.totalSteps - 1)) * 100;
            progressLine.style.setProperty('--progress-width', `${progressWidth}%`);
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —à–∞–≥–æ–≤
    updateStepVisibility() {
        const steps = document.querySelectorAll('.wizard-step');
        steps.forEach((step, index) => {
            const stepNumber = index + 1;
            step.classList.remove('active');
            
            if (stepNumber === this.currentStep) {
                step.classList.add('active');
            }
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    updateNavigationButtons() {
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');
        
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        if (prevBtn) {
            prevBtn.style.display = this.currentStep === 1 ? 'none' : 'flex';
        }
        
        // –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" / "–°–æ–∑–¥–∞—Ç—å"
        if (nextBtn) {
            if (this.currentStep === this.totalSteps) {
                nextBtn.innerHTML = `
                    <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                    </svg>
                    –°–æ–∑–¥–∞—Ç—å –Ω–∞–±–æ—Ä
                `;
                nextBtn.onclick = () => this.createSet();
            } else {
                nextBtn.innerHTML = `
                    –î–∞–ª–µ–µ
                    <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                    </svg>
                `;
                nextBtn.onclick = () => this.nextStep();
            }
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
    validateCurrentStep() {
        let isValid = false;
        let message = '';
        
        // –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞
        if (this.currentStep === 1) {
            const setNameInput = document.getElementById('setName');
            if (setNameInput) {
                const currentValue = setNameInput.value.trim();
                this.formData.setName = currentValue; // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ formData
                console.log('–í–∞–ª–∏–¥–∞—Ü–∏—è: —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è:', currentValue);
                console.log('–í–∞–ª–∏–¥–∞—Ü–∏—è: –∑–Ω–∞—á–µ–Ω–∏–µ –≤ formData:', this.formData.setName);
            }
        }
        
        switch (this.currentStep) {
            case 1:
                const nameLength = this.formData.setName ? this.formData.setName.trim().length : 0;
                isValid = nameLength >= 3;
                console.log('–í–∞–ª–∏–¥–∞—Ü–∏—è —à–∞–≥–∞ 1: –¥–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è =', nameLength, '–≤–∞–ª–∏–¥–Ω–æ =', isValid);
                message = isValid ? '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ' : `–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞). –¢–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞: ${nameLength}`;
                break;
            case 2:
                isValid = this.formData.selectedSources.length > 0;
                message = isValid ? `–í—ã–±—Ä–∞–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${this.formData.selectedSources.length}` : '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞';
                break;
            case 3:
                isValid = true;
                message = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –≥–æ—Ç–æ–≤—ã';
                break;
            case 4:
                isValid = true;
                message = '–ì–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –Ω–∞–±–æ—Ä–∞';
                break;
        }
        
        this.updateValidationMessage(message, isValid);
        this.updateNextButtonState(isValid);
        
        return isValid;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    updateValidationMessage(message, isValid) {
        const messageElement = document.getElementById('validationMessage');
        if (messageElement) {
            messageElement.textContent = message;
            messageElement.className = `creation-status ${isValid ? 'success' : 'error'}`;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ"
    updateNextButtonState(isValid) {
        const nextBtn = document.getElementById('nextBtn');
        if (nextBtn) {
            nextBtn.disabled = !isValid;
            nextBtn.style.opacity = isValid ? '1' : '0.5';
        }
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–µ—Ç–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    renderSourcesGrid() {
        const grid = document.getElementById('sourcesGrid');
        if (!grid) return;
        
        const sourcesHTML = this.availableSources.map(source => `
            <div class="source-card ${this.formData.selectedSources.includes(source.id) ? 'selected' : ''}" 
                 data-source-id="${source.id}" onclick="aiAutopostingWizard.toggleSource(${source.id})">
                <div class="source-header">
                    <div class="source-icon">${source.icon}</div>
                    <div class="source-info">
                        <h3>${source.name}</h3>
                        <p>${source.description}</p>
                    </div>
                </div>
                <div class="source-stats">
                    <div class="source-stat">
                        <div class="source-stat-value">${source.stats.posts}</div>
                        <div class="source-stat-label">–ü–æ—Å—Ç–æ–≤</div>
                    </div>
                    <div class="source-stat">
                        <div class="source-stat-value">${source.stats.engagement}</div>
                        <div class="source-stat-label">–û—Ö–≤–∞—Ç</div>
                    </div>
                </div>
            </div>
        `).join('');
        
        grid.innerHTML = sourcesHTML;
        this.updateSelectionCounter();
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    toggleSource(sourceId) {
        const index = this.formData.selectedSources.indexOf(sourceId);
        const card = document.querySelector(`[data-source-id="${sourceId}"]`);
        
        if (index > -1) {
            this.formData.selectedSources.splice(index, 1);
            card?.classList.remove('selected');
        } else {
            this.formData.selectedSources.push(sourceId);
            card?.classList.add('selected');
        }
        
        this.updateSelectionCounter();
        this.validateCurrentStep();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    updateSelectionCounter() {
        const counter = document.getElementById('selectionCounter');
        const countElement = document.getElementById('selectedCount');
        
        if (counter && countElement) {
            const count = this.formData.selectedSources.length;
            countElement.textContent = count;
            counter.style.display = count > 0 ? 'block' : 'none';
        }
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä–µ–≤—å—é
    renderPreview() {
        const nameElement = document.getElementById('previewSetName');
        const descriptionElement = document.getElementById('previewSetDescription');
        const detailsElement = document.getElementById('previewDetails');
        
        if (nameElement) {
            nameElement.textContent = this.formData.setName || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
        }
        
        if (descriptionElement) {
            descriptionElement.textContent = this.formData.setDescription || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è';
        }
        
        if (detailsElement) {
            const selectedSources = this.availableSources.filter(source => 
                this.formData.selectedSources.includes(source.id)
            );
            
            detailsElement.innerHTML = `
                <div class="detail-section">
                    <h4>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h4>
                    <div class="detail-list">
                        ${selectedSources.map(source => `
                            <div class="detail-item">
                                <div class="detail-item-icon">${source.icon}</div>
                                <div class="detail-item-text">${source.name}</div>
                            </div>
                        `).join('')}
                    </div>
                </div>
                
                <div class="detail-section">
                    <h4>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞</h4>
                    <div class="detail-list">
                        <div class="detail-item">
                            <div class="detail-item-icon">üîµ</div>
                            <div class="detail-item-text">
                                –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: –∫–∞–∂–¥—ã–µ ${this.formData.platformSettings.vk.frequency} —á., 
                                ${this.formData.platformSettings.vk.startTime}:00-${this.formData.platformSettings.vk.endTime}:00, 
                                —Å—Ç–∏–ª—å: ${this.getStyleName(this.formData.platformSettings.vk.style)}
                            </div>
                        </div>
                        <div class="detail-item">
                            <div class="detail-item-icon">üì±</div>
                            <div class="detail-item-text">
                                Telegram: –∫–∞–∂–¥—ã–µ ${this.formData.platformSettings.telegram.frequency} —á., 
                                ${this.formData.platformSettings.telegram.startTime}:00-${this.formData.platformSettings.telegram.endTime}:00, 
                                —Å—Ç–∏–ª—å: ${this.getStyleName(this.formData.platformSettings.telegram.style)}
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="detail-section">
                    <h4>–°—Ç–∞—Ç—É—Å –Ω–∞–±–æ—Ä–∞</h4>
                    <div class="detail-list">
                        <div class="detail-item">
                            <div class="detail-item-icon">${this.formData.isActive ? '‚úÖ' : '‚è∏Ô∏è'}</div>
                            <div class="detail-item-text">
                                –ù–∞–±–æ—Ä ${this.formData.isActive ? '–∞–∫—Ç–∏–≤–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'} 
                                –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–µ
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∏–ª—è
    getStyleName(style) {
        const styles = {
            'professional': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π',
            'casual': '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π',
            'engaging': '–í–æ–≤–ª–µ–∫–∞—é—â–∏–π',
            'informative': '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π'
        };
        return styles[style] || style;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞
    async createSet() {
        const statusElement = document.getElementById('creationStatus');
        const nextBtn = document.getElementById('nextBtn');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        if (statusElement) {
            statusElement.innerHTML = `
                <div class="loading-spinner"></div>
                –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è AI –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞...
            `;
            statusElement.className = 'creation-status loading';
        }
        
        if (nextBtn) {
            nextBtn.disabled = true;
        }
        
        try {
            // –°–∏–º—É–ª—è—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞
            await this.simulateApiCall();
            
            // –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
            if (statusElement) {
                statusElement.innerHTML = `
                    <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                    </svg>
                    –ù–∞–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!
                `;
                statusElement.className = 'creation-status success';
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showNotification('–ù–∞–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è AI –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', 'success');
            
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–±–æ—Ä–∞–º–∏
            setTimeout(() => {
                window.contentManager.showPage('manageContentSets', '–ù–∞–±–æ—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è AI AutoSMM');
            }, 2000);
            
        } catch (error) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
            if (statusElement) {
                statusElement.innerHTML = `
                    <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                    –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.
                `;
                statusElement.className = 'creation-status error';
            }
            
            if (nextBtn) {
                nextBtn.disabled = false;
            }
            
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤', 'error');
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–±–æ—Ä–∞:', error);
        }
    }

    // –°–∏–º—É–ª—è—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞
    async simulateApiCall() {
        return new Promise((resolve) => {
            setTimeout(resolve, 2000);
        });
    }

    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    showNotification(message, type) {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;
        
        notification.style.cssText = `
            position: fixed;
            top: 24px;
            right: 24px;
            background: ${type === 'success' ? '#34C759' : type === 'error' ? '#FF3B30' : '#007AFF'};
            color: white;
            padding: 16px 24px;
            border-radius: 16px;
            backdrop-filter: blur(20px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
            z-index: 10002;
            animation: slideInRight 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            max-width: 400px;
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (!document.querySelector('#notification-styles')) {
            const style = document.createElement('style');
            style.id = 'notification-styles';
            style.textContent = `
                @keyframes slideInRight {
                    from {
                        opacity: 0;
                        transform: translateX(100%);
                    }
                    to {
                        opacity: 1;
                        transform: translateX(0);
                    }
                }
                
                @keyframes slideOutRight {
                    from {
                        opacity: 1;
                        transform: translateX(0);
                    }
                    to {
                        opacity: 0;
                        transform: translateX(100%);
                    }
                }
            `;
            document.head.appendChild(style);
        }
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.4s cubic-bezier(0.4, 0, 0.2, 1)';
            setTimeout(() => {
                if (notification.parentNode) {
                    document.body.removeChild(notification);
                }
            }, 400);
        }, 4000);
    }

    // –°–±—Ä–æ—Å –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    reset() {
        this.currentStep = 1;
        this.formData = {
            setName: '',
            setDescription: '',
            isActive: false,
            selectedSources: [],
            platformSettings: {
                vk: {
                    frequency: 2,
                    startTime: 8,
                    endTime: 22,
                    style: 'casual'
                },
                telegram: {
                    frequency: 4,
                    startTime: 9,
                    endTime: 21,
                    style: 'engaging'
                }
            }
        };
        this.isInitialized = false;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.aiAutopostingWizard = new AIAutopostingWizard();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Å—Ç–µ—Ä–∞
function initializeWizardIfNeeded() {
    if (window.location.hash.includes('createAIAutopostingSet')) {
        // –ñ–¥–µ–º, –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const checkAndInit = () => {
            const wizardElement = document.querySelector('.ai-creation-wizard');
            if (wizardElement) {
                window.aiAutopostingWizard.reset();
                window.aiAutopostingWizard.init();
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—è –≤–≤–æ–¥–∞
                setTimeout(() => {
                    const setNameInput = document.getElementById('setName');
                    if (setNameInput) {
                        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º formData
                        setNameInput.value = '';
                        window.aiAutopostingWizard.formData.setName = '';
                        window.aiAutopostingWizard.validateCurrentStep();
                        console.log('–ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
                    }
                }, 200);
            } else {
                // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                setTimeout(checkAndInit, 50);
            }
        };
        setTimeout(checkAndInit, 100);
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', initializeWizardIfNeeded);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ SPA
window.addEventListener('hashchange', initializeWizardIfNeeded);

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è SPA-–Ω–∞–≤–∏–≥–∞—Ü–∏–∏
if (window.contentManager) {
    // –°–æ–∑–¥–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            if (mutation.type === 'childList' && 
                window.location.hash.includes('createAIAutopostingSet')) {
                setTimeout(initializeWizardIfNeeded, 50);
            }
        });
    });
    
    // –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
    document.addEventListener('DOMContentLoaded', () => {
        const mainContainer = document.querySelector('.main-container');
        if (mainContainer) {
            observer.observe(mainContainer, { 
                childList: true, 
                subtree: true 
            });
        }
    });
}